"use strict";
var hmmer_vis = {};
hmmer_vis.dispatch = d3.dispatch('update', 'search_tableSpecies', 'update_histogram','search_tableRange', 'update_lineage_plot','update_tree_legend','update_pdb_viewer');
// namespace.dispatcher = d3.dispatch('piechart_update');

// d3.tip
// Copyright (c) 2013 Justin Palmer
//
// Tooltips for d3.js SVG visualizations

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module with d3 as a dependency.
    define(['d3'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS
    module.exports = function(d3) {
      d3.tip = factory(d3)
      return d3.tip
    }
  } else {
    // Browser global.
    root.d3.tip = factory(root.d3)
  }
}(this, function (d3) {

  // Public - contructs a new tooltip
  //
  // Returns a tip
  return function() {
    var direction = d3_tip_direction,
        offset    = d3_tip_offset,
        html      = d3_tip_html,
        node      = initNode(),
        svg       = null,
        point     = null,
        target    = null

    function tip(vis) {
      svg = getSVGNode(vis)
      point = svg.createSVGPoint()
      document.body.appendChild(node)
    }

    // Public - show the tooltip on the screen
    //
    // Returns a tip
    tip.show = function() {
      var args = Array.prototype.slice.call(arguments)
      if(args[args.length - 1] instanceof SVGElement) target = args.pop()

      var content = html.apply(this, args),
          poffset = offset.apply(this, args),
          dir     = direction.apply(this, args),
          nodel   = d3.select(node),
          i       = directions.length,
          coords,
          scrollTop  = document.documentElement.scrollTop || document.body.scrollTop,
          scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft

      nodel.html(content)
        .style({ opacity: 1, 'pointer-events': 'all' })

      while(i--) nodel.classed(directions[i], false)
      coords = direction_callbacks.get(dir).apply(this)
      nodel.classed(dir, true).style({
        top: (coords.top +  poffset[0]) + scrollTop + 'px',
        left: (coords.left + poffset[1]) + scrollLeft + 'px'
      })

      return tip
    }

    // Public - hide the tooltip
    //
    // Returns a tip
    tip.hide = function() {
      var nodel = d3.select(node)
      nodel.style({ opacity: 0, 'pointer-events': 'none' })
      return tip
    }

    // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.
    //
    // n - name of the attribute
    // v - value of the attribute
    //
    // Returns tip or attribute value
    tip.attr = function(n, v) {
      if (arguments.length < 2 && typeof n === 'string') {
        return d3.select(node).attr(n)
      } else {
        var args =  Array.prototype.slice.call(arguments)
        d3.selection.prototype.attr.apply(d3.select(node), args)
      }

      return tip
    }

    // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.
    //
    // n - name of the property
    // v - value of the property
    //
    // Returns tip or style property value
    tip.style = function(n, v) {
      if (arguments.length < 2 && typeof n === 'string') {
        return d3.select(node).style(n)
      } else {
        var args =  Array.prototype.slice.call(arguments)
        d3.selection.prototype.style.apply(d3.select(node), args)
      }

      return tip
    }

    // Public: Set or get the direction of the tooltip
    //
    // v - One of n(north), s(south), e(east), or w(west), nw(northwest),
    //     sw(southwest), ne(northeast) or se(southeast)
    //
    // Returns tip or direction
    tip.direction = function(v) {
      if (!arguments.length) return direction
      direction = v == null ? v : d3.functor(v)

      return tip
    }

    // Public: Sets or gets the offset of the tip
    //
    // v - Array of [x, y] offset
    //
    // Returns offset or
    tip.offset = function(v) {
      if (!arguments.length) return offset
      offset = v == null ? v : d3.functor(v)

      return tip
    }

    // Public: sets or gets the html value of the tooltip
    //
    // v - String value of the tip
    //
    // Returns html value or tip
    tip.html = function(v) {
      if (!arguments.length) return html
      html = v == null ? v : d3.functor(v)

      return tip
    }

    function d3_tip_direction() { return 'n' }
    function d3_tip_offset() { return [0, 0] }
    function d3_tip_html() { return ' ' }

    var direction_callbacks = d3.map({
      n:  direction_n,
      s:  direction_s,
      e:  direction_e,
      w:  direction_w,
      nw: direction_nw,
      ne: direction_ne,
      sw: direction_sw,
      se: direction_se
    }),

    directions = direction_callbacks.keys()

    function direction_n() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.n.y - node.offsetHeight,
        left: bbox.n.x - node.offsetWidth / 2
      }
    }

    function direction_s() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.s.y,
        left: bbox.s.x - node.offsetWidth / 2
      }
    }

    function direction_e() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.e.y - node.offsetHeight / 2,
        left: bbox.e.x
      }
    }

    function direction_w() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.w.y - node.offsetHeight / 2,
        left: bbox.w.x - node.offsetWidth
      }
    }

    function direction_nw() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.nw.y - node.offsetHeight,
        left: bbox.nw.x - node.offsetWidth
      }
    }

    function direction_ne() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.ne.y - node.offsetHeight,
        left: bbox.ne.x
      }
    }

    function direction_sw() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.sw.y,
        left: bbox.sw.x - node.offsetWidth
      }
    }

    function direction_se() {
      var bbox = getScreenBBox()
      return {
        top:  bbox.se.y,
        left: bbox.e.x
      }
    }

    function initNode() {
      var node = d3.select(document.createElement('div'))
      node.style({
        position: 'absolute',
        top: 0,
        opacity: 0,
        'pointer-events': 'none',
        'box-sizing': 'border-box'
      })

      return node.node()
    }

    function getSVGNode(el) {
      el = el.node()
      if(el.tagName.toLowerCase() === 'svg')
        return el

      return el.ownerSVGElement
    }

    // Private - gets the screen coordinates of a shape
    //
    // Given a shape on the screen, will return an SVGPoint for the directions
    // n(north), s(south), e(east), w(west), ne(northeast), se(southeast), nw(northwest),
    // sw(southwest).
    //
    //    +-+-+
    //    |   |
    //    +   +
    //    |   |
    //    +-+-+
    //
    // Returns an Object {n, s, e, w, nw, sw, ne, se}
    function getScreenBBox() {
      var targetel   = target || d3.event.target;

      while ('undefined' === typeof targetel.getScreenCTM && 'undefined' === targetel.parentNode) {
          targetel = targetel.parentNode;
      }

      var bbox       = {},
          matrix     = targetel.getScreenCTM(),
          tbbox      = targetel.getBBox(),
          width      = tbbox.width,
          height     = tbbox.height,
          x          = tbbox.x,
          y          = tbbox.y

      point.x = x
      point.y = y
      bbox.nw = point.matrixTransform(matrix)
      point.x += width
      bbox.ne = point.matrixTransform(matrix)
      point.y += height
      bbox.se = point.matrixTransform(matrix)
      point.x -= width
      bbox.sw = point.matrixTransform(matrix)
      point.y -= height / 2
      bbox.w  = point.matrixTransform(matrix)
      point.x += width
      bbox.e = point.matrixTransform(matrix)
      point.x -= width / 2
      point.y -= height / 2
      bbox.n = point.matrixTransform(matrix)
      point.y += height
      bbox.s = point.matrixTransform(matrix)

      return bbox
    }

    return tip
  };

}));


hmmer_vis.data_table = function() {
	"use strict";
	var data_table_chart;
	var conf = {
		'no_hits_threshold': 10,
		'pagination_number': 10
	};
	var curr = {
		'no_all_rows' : 0,
		'data' : undefined,
		'all_data' : undefined,
		'columns' : undefined,
	};
	var hmmer_seq_match = hmmer_vis.seq_match();
	// The cbak returned
	var data_table = function(div_id,hits) {
		// $.getJSON('../../data/data.json', function(data) {
		// $.getJSON('../../data/data_50000.json', function(data) {
			curr.no_all_rows = hits.length;
			var data_chunk = {};
			if(curr.no_all_rows > conf.no_hits_threshold){
				data_chunk =  hits.slice(0, 1000);
			}
			else{
				data_chunk = hits;
			}
			data_chunk = data_chunk[0];
			$('#'+div_id+'').html( '<table cellpadding="0" cellspacing="0" border="0" class="display" id="example"></table>' );
			$('#example').dataTable({
			    "aaData": data_chunk,
			        "aoColumns": [{
			         "sTitle": "UniProt","mDataProp": "acc"
			    }, {
			         "sTitle": "Species","mDataProp": "species"
			    }, {
			         "sTitle": "evalue","mDataProp": "evalue"
			    }, {
			        "sTitle": "Match","mDataProp": "acc"
			    }],
				"oLanguage": {
				   						"sProcessing": "loading data..."
				   },
				   "fnCreatedRow": function( nRow, aData, iDataIndex ) {
				         // Bold the grade for all 'A' grade browsers
		   				var div = document.createElement("div");
						div.setAttribute('id',"pdb_table_"+iDataIndex);
						$(nRow).children("td:last-child").html('');
						$(nRow).children("td:last-child").append(div);
						hmmer_seq_match(div,aData);
					},
					"columnDefs": [
					    { "width": "10%", "targets": 0 },
						{ "width": "10%", "targets": 1 },
						{ "width": "10%", "targets": 2 },
						{ "width": "70%", "targets": 3 }
					  ]
			});
			// $('#example').dataTable({
// 			    "aaData": testdata,
// 			        "aoColumns": [{
// 			        "mDataProp": "id"
// 			    }, {
// 			        "mDataProp": "country_code"
// 			    }, {
// 			        "mDataProp": "title"
// 			    }, {
// 			        "mDataProp": "pubdate"
// 			    }, {
// 			        "mDataProp": "url"
// 			    }]
// 			});
			
			// data_chunk = JSON.parse(data_chunk);
			// data_chunk = parse.Json(data_chunk[0]);
			// var json_fake_data = {'aaData' : data_chunk[0]};
 
			   // $('#example').dataTable( {
   // 			        "aaData": json_fake_data,
   // 				   "bProcessing": true,
   // 					"aoColumns":[
   // 					                             { "sTitle": "UniProt", "mDataProp": "acc" },
   // 					                             { "sTitle": "Pdb", "mDataProp": "acc" },
   // 												{ "sTitle": "evalue", "mDataProp": "evalue" },
   // 												{ "sTitle": "Matching region", "mDataProp": " " },
   // 					                           ],
   // 					"oLanguage": {
   // 						"sProcessing": "loading data..."
   // 					},
   // 					"fnCreatedRow" : data_table.append_divs,
   // 			    } ); 
		
			// data_table.plot_domains();
		// $.getJSON('../../data/data_4413.json', function(data) {
// 			curr.all_data = data.data;
// 			curr.columns = data.columns;
// 			curr.no_all_rows = curr.all_data.length;
// 			var data_chunk = {};
// 			if(curr.no_all_rows > conf.no_hits_threshold){
// 				data_chunk =  curr.all_data.slice(0, 1000);
// 			}
// 			else{
// 				data_chunk = curr.all_data;
// 			}
// 			data_table_chart = $('#testtable').dataTable({
// 				"data"  : data_chunk,
// 				"columns": curr.columns,
// 				"oLanguage": {
// 					"sProcessing": "loading data..."
// 				},
// 				"fnCreatedRow" : data_table.append_divs,
// 			});
//
// 			data_table.plot_domains();
//
// 		});
		return data_table;
	};


	data_table.append_divs = function(){
		return function (row, data,dataIndex) {
			var div = document.createElement("div");
			$(row).children("td:last-child").html('test');
			$(row).children("td:last-child").append(div);
		}
	}


	data_table.plot_domains = function(data,search_term){
		var rows = data_table_chart.fnGetNodes();
		for(var i=0;i<conf.pagination_number;i++){
			// can only plot the first x domains, where x is the number of entries per pagination page.
			// this is because datatables plots the 2nd, 3rd page only on demand
			// for(var i=0;i<rows.length;i++){
			var parent_id = "#no_"+i+"parent";
			var son_id = "#no_"+i;
			var chart = new PfamGraphic(parent_id, example_sequence);
			chart.render();
			var new_width = $(son_id).parent().width();
			chart.resize( new_width  );
		}
	}

	data_table.search_tableBySpecies = function(search_term){
		var filtered_data = [];
		for (var row of curr.all_data) {
			if(row[2] === search_term)
			filtered_data.push(row);
		}
		console.log("found "+filtered_data.length+" rows matching range");
		return filtered_data;
	}


	data_table.search_tableByRange = function(start, end ){
		var filtered_data = [];

		for (var i=0; i<curr.all_data.length; i++) {
		// for(var row of curr.all_data){
			if(i >= start && i <= end){
				filtered_data.push(curr.all_data[i]);
			}

		}
		console.log("found "+filtered_data.length+" rows matching range");
		return filtered_data;
	}


	hmmer_vis.dispatch.on('search_tableRange', function(args){
		var filtered_data = data_table.search_tableByRange(Math.floor((Math.random() * 10) + 1), 321)
		data_table.update_table(filtered_data)
	})
	hmmer_vis.dispatch.on('search_tableSpecies', function(args){

		// if there are too many datapoints in the table
		if(curr.no_all_rows > conf.no_hits_threshold){
			var filtered_data = data_table.search_tableBySpecies('Homo sapiens')
			data_table.update_table(filtered_data)

		}
		else{
			//do something here
			console.log("in datatable: I was told to  "+args.search_term);
			data_table_chart.search( args.search_term )
			.draw();
		}


	})

	data_table.update_table = function(new_data){
		var data_chunk = new_data;
		curr.no_all_rows = data_chunk.length;
		if(curr.no_all_rows > conf.no_hits_threshold){
			data_chunk =  new_data.slice(0, 1000);
		}

		var dt = $('#testtable').dataTable();
		dt.fnDestroy;
		dt.fnClearTable();
		dt.fnAddData(data_chunk);
		dt.fnDraw();
		dt.fnAdjustColumnSizing();

		return data_table;

	}

	var example_sequence = {
		"length": 3460,
		"regions": [
			{
				"modelStart": "1",
				"modelEnd": "195",
				"endStyle": "curved",
				"end": 2699,
				"display": true,
				"startStyle": "curved",
				"color": "#98cc32",
				"aliEnd": 2699,
				"modelLength": 195,
				"text": "BRCA-2_helical",
				"href": "http://pfam.xfam.org/family/PF09169.5",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "3.5e-101",
					"_uniq": 1,
					"description": "BRCA2, helical",
					"bitscore": 325.350524902344,
					"end": "2699",
					"accession": "PF09169.5",
					"database": "pfam",
					"aliEnd": 2699,
					"identifier": "BRCA-2_helical",
					"type": "Domain",
					"aliStart": 2511,
					"start": "2511"
				},
				"aliStart": 2511,
				"clan": null,
				"start": 2511
			},
			{
				"modelStart": "1",
				"modelEnd": "35",
				"endStyle": "curved",
				"end": 1038,
				"display": true,
				"startStyle": "curved",
				"color": "#371e7a",
				"aliEnd": 1038,
				"modelLength": 35,
				"text": "BRCA2",
				"href": "http://pfam.xfam.org/family/PF00634.13",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "3.0e-15",
					"_uniq": 2,
					"description": "BRCA2 repeat",
					"bitscore": 44.0078163146973,
					"end": "1038",
					"accession": "PF00634.13",
					"database": "pfam",
					"aliEnd": 1038,
					"identifier": "BRCA2",
					"type": "Family",
					"aliStart": 1004,
					"start": "1004"
				},
				"aliStart": 1004,
				"clan": null,
				"start": 1004
			},
			{
				"modelStart": "1",
				"modelEnd": "35",
				"endStyle": "curved",
				"end": 1253,
				"display": true,
				"startStyle": "curved",
				"color": "#371e7a",
				"aliEnd": 1253,
				"modelLength": 35,
				"text": "BRCA2",
				"href": "http://pfam.xfam.org/family/PF00634.13",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "2.0e-09",
					"_uniq": 3,
					"description": "BRCA2 repeat",
					"bitscore": 25.367561340332,
					"end": "1253",
					"accession": "PF00634.13",
					"database": "pfam",
					"aliEnd": 1253,
					"identifier": "BRCA2",
					"type": "Family",
					"aliStart": 1219,
					"start": "1219"
				},
				"aliStart": 1219,
				"clan": null,
				"start": 1219
			},
			{
				"modelStart": "7",
				"modelEnd": "34",
				"endStyle": "jagged",
				"end": 1463,
				"display": true,
				"startStyle": "jagged",
				"color": "#371e7a",
				"aliEnd": 1462,
				"modelLength": 35,
				"text": "BRCA2",
				"href": "http://pfam.xfam.org/family/PF00634.13",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "3.6e-13",
					"_uniq": 4,
					"description": "BRCA2 repeat",
					"bitscore": 37.3688583374023,
					"end": "1463",
					"accession": "PF00634.13",
					"database": "pfam",
					"aliEnd": 1462,
					"identifier": "BRCA2",
					"type": "Family",
					"aliStart": 1435,
					"start": "1432"
				},
				"aliStart": 1435,
				"clan": null,
				"start": 1432
			},
			{
				"modelStart": "3",
				"modelEnd": "34",
				"endStyle": "jagged",
				"end": 1566,
				"display": true,
				"startStyle": "jagged",
				"color": "#371e7a",
				"aliEnd": 1565,
				"modelLength": 35,
				"text": "BRCA2",
				"href": "http://pfam.xfam.org/family/PF00634.13",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "6.5e-15",
					"_uniq": 5,
					"description": "BRCA2 repeat",
					"bitscore": 42.9266929626465,
					"end": "1566",
					"accession": "PF00634.13",
					"database": "pfam",
					"aliEnd": 1565,
					"identifier": "BRCA2",
					"type": "Family",
					"aliStart": 1534,
					"start": "1532"
				},
				"aliStart": 1534,
				"clan": null,
				"start": 1532
			},
			{
				"modelStart": "1",
				"modelEnd": "34",
				"endStyle": "jagged",
				"end": 1710,
				"display": true,
				"startStyle": "curved",
				"color": "#371e7a",
				"aliEnd": 1710,
				"modelLength": 35,
				"text": "BRCA2",
				"href": "http://pfam.xfam.org/family/PF00634.13",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "9.4e-18",
					"_uniq": 6,
					"description": "BRCA2 repeat",
					"bitscore": 52.0054969787598,
					"end": "1710",
					"accession": "PF00634.13",
					"database": "pfam",
					"aliEnd": 1710,
					"identifier": "BRCA2",
					"type": "Family",
					"aliStart": 1677,
					"start": "1677"
				},
				"aliStart": 1677,
				"clan": null,
				"start": 1677
			},
			{
				"modelStart": "3",
				"modelEnd": "35",
				"endStyle": "curved",
				"end": 2043,
				"display": true,
				"startStyle": "jagged",
				"color": "#371e7a",
				"aliEnd": 2043,
				"modelLength": 35,
				"text": "BRCA2",
				"href": "http://pfam.xfam.org/family/PF00634.13",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "3.5e-16",
					"_uniq": 7,
					"description": "BRCA2 repeat",
					"bitscore": 47.0057029724121,
					"end": "2043",
					"accession": "PF00634.13",
					"database": "pfam",
					"aliEnd": 2043,
					"identifier": "BRCA2",
					"type": "Family",
					"aliStart": 2011,
					"start": "2010"
				},
				"aliStart": 2011,
				"clan": null,
				"start": 2010
			},
			{
				"modelStart": "2",
				"modelEnd": "34",
				"endStyle": "jagged",
				"end": 2112,
				"display": true,
				"startStyle": "jagged",
				"color": "#371e7a",
				"aliEnd": 2111,
				"modelLength": 35,
				"text": "BRCA2",
				"href": "http://pfam.xfam.org/family/PF00634.13",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "3.7e-16",
					"_uniq": 8,
					"description": "BRCA2 repeat",
					"bitscore": 46.8995971679688,
					"end": "2112",
					"accession": "PF00634.13",
					"database": "pfam",
					"aliEnd": 2111,
					"identifier": "BRCA2",
					"type": "Family",
					"aliStart": 2079,
					"start": "2078"
				},
				"aliStart": 2079,
				"clan": null,
				"start": 2078
			},
			{
				"modelStart": "1",
				"modelEnd": "143",
				"endStyle": "curved",
				"end": 3222,
				"display": true,
				"startStyle": "curved",
				"color": "#32adcc",
				"aliEnd": 3222,
				"modelLength": 143,
				"text": "BRCA-2_OB3",
				"href": "http://pfam.xfam.org/family/PF09104.5",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "9.9e-70",
					"_uniq": 9,
					"description": "BRCA2, oligonucleotide/oligosaccharide-binding, domain 3",
					"bitscore": 221.59977722168,
					"end": "3222",
					"accession": "PF09104.5",
					"database": "pfam",
					"aliEnd": 3222,
					"identifier": "BRCA-2_OB3",
					"type": "Domain",
					"aliStart": 3084,
					"start": "3084"
				},
				"aliStart": 3084,
				"clan": null,
				"start": 3084
			},
			{
				"modelStart": "1",
				"modelEnd": "117",
				"endStyle": "jagged",
				"end": 2832,
				"display": true,
				"startStyle": "curved",
				"color": "#cc8432",
				"aliEnd": 2831,
				"modelLength": 118,
				"text": "BRCA-2_OB1",
				"href": "http://pfam.xfam.org/family/PF09103.5",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "6.4e-45",
					"_uniq": 10,
					"description": "BRCA2, oligonucleotide/oligosaccharide-binding, domain 1",
					"bitscore": 140.40397644043,
					"end": "2832",
					"accession": "PF09103.5",
					"database": "pfam",
					"aliEnd": 2831,
					"identifier": "BRCA-2_OB1",
					"type": "Domain",
					"aliStart": 2702,
					"start": "2702"
				},
				"aliStart": 2702,
				"clan": null,
				"start": 2702
			},
			{
				"modelStart": "1",
				"modelEnd": "42",
				"endStyle": "curved",
				"end": 2904,
				"display": true,
				"startStyle": "curved",
				"color": "#333333",
				"aliEnd": 2904,
				"modelLength": 42,
				"text": "Tower",
				"href": "http://pfam.xfam.org/family/PF09121.5",
				"type": "pfama",
				"metadata": {
					"scoreName": "e-value",
					"score": "1.0e-25",
					"_uniq": 11,
					"description": "Tower",
					"bitscore": 78.1909103393555,
					"end": "2904",
					"accession": "PF09121.5",
					"database": "pfam",
					"aliEnd": 2904,
					"identifier": "Tower",
					"type": "Domain",
					"aliStart": 2863,
					"start": "2863"
				},
				"aliStart": 2863,
				"clan": null,
				"start": 2863
			}
		],
		"arch": "76218951764462",
		"title": "Pfam",
		"markups": [],
		"motifs": []
	};

	return data_table;
};


hmmer_vis.domain_architectures_view = function() {
	"use strict";
	var chart, svg, axisScale, xAxis,yAxis,xAxisGroup,yAxisGroup;
	var margin = {top: 0, right: 20, bottom: 10, left: 85},
	width = 800 - margin.left - margin.right,
	height = 500 - margin.top - margin.bottom;
	var y = d3.scale.ordinal().rangeRoundBands([0, height], .3);
	var x = d3.scale.linear().rangeRound([0, width]);
	var conf = {
		'no_hits' : 10,
		'row_height' : 80,
		'query_offset' : 20,
		'width' : undefined,
		'height' : undefined,
		'query_line_offset' : 8.2,
		'hit_offset' : 9,
		'hit_height' : 4,
		'query_seq_height': 4,
		'longest_hit' : 0,
		'hit_legend_top' :6,
		'hit_legend_bottom' : 21,

		// global svg settings
		'div_width' : 300
	};
	var color = d3.scale.category20c();


	// The cbak returned
	var domain_architectures_view = function(div, data,query_architecture_id) {

		// number of hits
		conf.all_hits = data;
		conf.no_hits = conf.all_hits ? conf.all_hits.length : 1;
		conf.height = conf.no_hits * conf.row_height;

		// determine longest hit
		conf.longest_hit = d3.max(data, function(d) {
			var test;
			return d.length;
		});
		conf.width = conf.longest_hit;

		axisScale = d3.scale.linear()
		.domain([0, conf.width])
		.range([0, conf.div_width]);


		var ul = d3.select(div).append("ul").attr("class", "domains");
		
		var li = ul.selectAll("li").attr('class','dom_arch_hit')
		.data(conf.all_hits)
		.enter()
		.append("li")
		// label exact match
		.attr('class', function(d){
									return (query_architecture_id == d.archindex) ? 'exact' : ''
								})
		
		var li_link = li.append('a').attr('class', 'left archshow');
		var li_link_span = li_link.append("span").attr('class', 'block')
		var li_link_span_inner = li_link_span.append("span").attr('class', 'smaller')
		li_link_span.html(function(d){
			return d.dom_count+"<br>sequences";
		})
		var li_link_show_all = li_link.append("span").attr('class', 'show').text("Show All")
		
		
		// var li_right = li.append('p').attr('class', 'right');

		var li_text = li.append('p').html(function(d){
			// return 'with domain architecture: <strong>'+d.arch+'</strong>, <i>example:</i><a class="ext" href="http://www.uniprot.org/uniprot/F7FU48_MONDO">F7FU48_MONDO</a>'
			return '<strong>'+d.arch+'</strong>, <i>example:</i><a class="ext" href="http://www.uniprot.org/uniprot/F7FU48_MONDO">F7FU48_MONDO</a>'
		});
		var dom_arch_ids  = new Array();
		var dom_data = new Array();
		var svg_div = li.append("div").attr('class','domGraphics').attr('id', function(d,i){
			dom_data.push(d);
			dom_arch_ids.push(i);
			return "dom_"+i;
		})
		for (var id of dom_arch_ids) {
				   console.log(id);
				   var domain_data = dom_data[id]
				// add pfam graphics here
					var chart = new PfamGraphic("#dom_"+id, domain_data);
					// var chart = new PfamGraphic();
					chart.render();
					var new_width = $("#dom_"+id).parent().width();
					new_width = 450;
					 chart.resize( new_width );
			 	}
		
//
//
// 		var domain_example_svg = middle_div.append("div").attr('class','query_div')
// 		.append('svg')
// 		.attr('height', 20)
// 		.attr('width', "100%")
// 		.attr("transform", function(d){return "translate(30,30)"})
// 		.append("g");
//
// 		set_colors(domain_example_svg);
//
//
// 		domain_example_svg.append("rect")
// 		// y.rangeBand())
// 		.attr("class", "hit_bar")
// 		.attr("x", 0)
// 		.attr("y", 5)
// 		// .attr('y', function(d,i, j){ return (i)*conf.row_height + conf.hit_offset + 15; })
// 		.attr("width", function(d) { return axisScale(d.length); })
// 		.attr("height", 4.5)
// 		.attr('r', 0)
// 		.attr('ry', 0)
// 		.attr('rx', 0)
// 		.attr('stroke','none')
// 		.attr('opacity',1)
// 		.attr('fill-opacity',1)
// 		.style("fill", function(d) { return "url(#line_gradient)"; })
//
//
// 		domain_example_svg.append("rect")
// 		// y.rangeBand())
// 		.attr("class", "hit_position")
// 		.attr("x", function(d){return d.hits[0].qstart})
// 		.attr("y", 18)
// 		// .attr('y', function(d,i, j){ return (i)*conf.row_height + conf.hit_offset + 15; })
// 		.attr("width", function(d) {
// 			var qstart =  d.hits[0].qstart;
// 			var qend =  d.hits[0].qend;
// 			return axisScale(qend - qstart);
// 		})
// 		.attr("height", 2.5)
// 		.attr('r', 0)
// 		.attr('ry', 0)
// 		.attr('rx', 0)
// 		.attr('stroke','none')
// 		.attr('opacity',1)
// 		.attr('fill-opacity',1)
// 		.style("fill", function(d) { return "black"; })
//
//
//
// 		var target_matches = domain_example_svg.selectAll("g")
// 		.data(function(d) { return d.regions? d.regions : ""; })
// 		.enter();
//
// 		// target_matches.append("rect")
// // 		// y.rangeBand())
// // 		.attr("class", "hit_bar")
// // 		.attr("x", 0)
// // 		// .attr('y', function(d,i, j){ return (i)*conf.row_height + conf.hit_offset + 15; })
// // 		.attr("width", function(d) { return axisScale(d.length); })
// // 		.attr("height", 4.5)
// // 		.attr('r', 0)
// // 		.attr('ry', 0)
// // 		.attr('rx', 0)
// // 		.attr('stroke','none')
// // 		.attr('opacity',1)
// // 		.attr('fill-opacity',1)
// // 		.style("fill", function(d) { return "url(#line_gradient)"; })
//
//
// 		target_matches.append('path')
// 		.attr('d', function(d,i){
// 			return draw_domain(axisScale(d.end-d.start), 15);
// 		})
// 		.attr('stroke', function(d){return d.color})
// 		// .attr('fill', 'rgba(0,0,0,0)')
// 		// .attr('stroke-dasharray', '5,5')
// 		.attr('fill', function(d){
// 			return "url(#domain_gradient"+Math.floor((Math.random() * 4) + 1)+")"
// 		})
// 		.attr("transform", function(d,i,j){
// 			var x_coord = axisScale(d.start);
// 			var y_coord = 0;
// 			// x_coord = 20;
// 			return "translate("+x_coord+","+y_coord+")"	;
// 		})


		//evalue
		// hits.append("text")
		// .attr("class", "hit_legend")
		// .attr("x", function(d,i) {return -30;})
		// .attr('y', function(d,i, j){return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_top;})
		// .text("Query");

		// hits.append("text")
		// .attr("class", "hit_legend")
		// .attr("x", function(d,i) {return -80;})
		// .attr('y', function(d,i, j){return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_bottom;})
		// .text(function(d){return d.acc});
		//
		// hits.append("text")
		// .attr("class", "hit_number")
		// .attr("x", function(d,i) {return -80;})
		// .attr('y', function(d,i, j){return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_top;})
		// .text(function(d,i){return "Hit: "+parseInt(i+1);});


		//
		// // seq length target
		// target_matches.append("rect")
		// .attr("class", "count_rect")
		// .attr("width", 55)
		// .attr("height", 25)
		// .attr('stroke','#000')
		// .attr('stroke-width','0.5')
		// .attr('fill-opacity',0)
		// .attr("x", function(d,i) { return -70; })
		// .attr('y', function(d,i, j){
		// 	return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_top - 10;
		// })


		// hits.append("text")
		// .attr("class", "hit_legend")
		// .attr("x", function(d,i) { return -48 })
		// .attr('y', function(d,i, j){
		// 	return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_top;
		// })
		// .html(function(d){return d.dom_count});
		// hits.append("text")
		// .attr("class", "hit_legend")
		// .attr("x", function(d,i) { return -62 })
		// .attr('y', function(d,i, j){
		// 	return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_top+10;
		// })
		// .html(function(d){return "sequences"});
		//


		// // seq length target
		// hits.append("text")
		// .attr("class", "hit_legend")
		// .attr("x", function(d,i) { return axisScale(d.length)+2; })
		// .attr('y', function(d,i, j){
		// 	return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_bottom;
		// })
		// .text(function(d){return d.length});
		//
		// // query seq length
		// var dom_arch_string, dom_acc;
		// hits.append("text")
		// .attr("class", "hit_legend")
		// .attr("x", function(d,i) { return 50; })
		// .attr('y', function(d,i, j){
		// 	// dom_arch_string = d
		// 	return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_top;
		// })
		// .text(function(d){return "with domain architecture , example:"});

		// //evalue
		// hits.append("text")
		// .attr("class", "hit_legend")
		// .attr("x", function(d,i) { return axisScale(conf.longest_hit)+conf.hit_legend_bottom; })
		// .attr('y', function(d,i, j){
		// 	return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_top;
		// })
		// .text(function(d){return d.evalue});







		d3.selectAll(".axis path")
		.style("fill", "none")
		.style("stroke", "#000")
		.style("shape-rendering", "crispEdges")

		d3.selectAll(".axis line")
		.style("fill", "none")
		.style("stroke", "#000")
		.style("shape-rendering", "crispEdges")


		return domain_architectures_view;
	};



	var add_annotation_line	 = function(d){
		var curr_data = d;
		if(d.regions){
			d3.select(this).selectAll(".annotation_text").data(d.regions).enter()
			//.append("rect")
			.append("text")
			.attr("x", function(d) { return 35; })
			.attr("y", function(d) { return 4; })
		}
	};
	// hmmer_vis.dispatch.on('update', function(args){
	// 	    //do something here
	// 		console.log("I was told to  "+args.message);
	// 		// pie_chart.redraw(args.count);
	//})


	domain_architectures_view.redraw = function(new_data) {
		// update axis
		// we don't really need that as the query doesnt change
		var y_domain = ["Query"];
		for (var i = 1; i <= new_data.length; i++) {
			y_domain.push("Hit "+i)
		}
		// y_domain.push([example_data.map(function(d,i){ return "Hit "+(i+1); })])
		y.domain(y_domain);

		// y.domain(example_data.map(function(d,i){ return "Hit "+(i+1); }));
		// console.log(conf.row_height * example_data.length);
		y.rangeRoundBands([0,conf.row_height * new_data.length])

		d3.select("#y_axis").call(yAxis);



		var vakken = svg.selectAll(".bar").data(new_data, keyFunction);
		vakken.transition().duration(2000);

		var vakken_enter = vakken
		.enter().append("g")
		.attr("class", "bar")
		// .attr("transform", function(d) { return "translate(0," + y(d.Question) + ")"; });

		var bars = vakken_enter.selectAll("rect")
		.data(function(d) { return d.regions; });

		bars.transition(function(d){console.log("transitioning ")}).duration(2000).attr("x", 0).style("fill", "yellow");

		var bars_enter = bars.enter().append("g").attr("class", "subbar");

		bars_enter.append("rect")
		.attr("height", conf.hit_height)
		// y.rangeBand())
		.attr("x", function(d) { return axisScale(d.aliStart); })
		.attr('y', function(d,i, j){
			// console.log(d.name+" y = "+(j+1)*20+" i: "+i+ " j: "+j)
			return (i+1)*conf.row_height + conf.hit_offset;
			// return (i)*conf.row_height  + conf.hit_offset;
			// return (i)*conf.row_height + 5;
		})
		.attr("width", function(d) { return axisScale(d.aliEnd - d.aliStart); })
		.style("fill", function(d) { return "green";//color(d.name);
	});



	// bars.append("text")
	// .attr("x", function(d) { return -20; })
	// .attr("y", function(d, i){ return (i+1)*20})
	// .attr("dy", "0.5em")
	// .attr("dx", "0.5em")
	// .style("font" ,"10px sans-serif")
	// .style("text-anchor", "begin")
	// .text(function(d, i) { return "Hit "+i });


	vakken.exit(function(d){
		console.log("removing d: "+d.name);

	}).remove();
	bars.exit().remove();

	return hits_view;
}
//Generate some nice data.
function _exampleData() {
	var test_array = [];
	for (var letter in {'present':0,'complete':0, 'incomplete':0}) {
		test_array.push({'label':letter, 'value': Math.random()*30})
	}
	return test_array;
}


var keyFunction = function(d) {
	// console.log("key is "+d.name);
	return d.arch;
};


function set_colors(svg){
	var gradient = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "line_gradient")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "1.8369701987210297e-16").attr("y1", "0").attr("x2", "0").attr("y2", "1").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
	gradient.append("svg:stop").attr('offset', '0%').attr('stop-color',"#999999").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient.append("svg:stop").attr('offset', '40%').attr('stop-color',"#eeeeee").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient.append("svg:stop").attr('offset', '60%').attr('stop-color',"#cccccc").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient.append("svg:stop").attr('offset', '100%').attr('stop-color',"#999999").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")


	var gradient2 = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "domain_gradient")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "0").attr("y1", "1").attr("x2", "6.123233995736766e-17").attr("y2", "0").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
	gradient2.append("svg:stop").attr('offset', '0%').attr('stop-color',"#ffffff").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient2.append("svg:stop").attr('offset', '50%').attr('stop-color',"#a3287a").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient2.append("svg:stop").attr('offset', '70%').attr('stop-color',"#a3287a").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient2.append("svg:stop").attr('offset', '100%').attr('stop-color',"#ffffff").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")







	var gradient3 = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "domain_gradient2")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "0").attr("y1", "1").attr("x2", "6.12").attr("y2", "0").attr("gradientTransform", "matrix(1,0,0,1,0,0)");

	gradient3.append("svg:stop").attr('offset', '0%').attr('stop-color',"#0099CC").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient3.append("svg:stop").attr('offset', '50%').attr('stop-color',"#7a1e74").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient3.append("svg:stop").attr('offset', '70%').attr('stop-color',"#7a1e74").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient3.append("svg:stop").attr('offset', '100%').attr('stop-color',"#0099CC").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")





	var gradient4 = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "domain_gradient3")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "0").attr("y1", "1").attr("x2", "6.12").attr("y2", "0").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
	gradient4.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "0%").attr("stop-color", "#CCF2CC");
	gradient4.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "50%").attr("stop-color", "#7a1e74");
	gradient4.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "60%").attr("stop-color", "#7a1e74");
	gradient4.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "100%").attr("stop-color", "#ffffff");

	var gradient5 = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "domain_gradient4")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "0").attr("y1", "1").attr("x2", "6.12").attr("y2", "0").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
	gradient5.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "0%").attr("stop-color", "#14101f");
	gradient5.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "50%").attr("stop-color", "#7a1e74");
	gradient5.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "60%").attr("stop-color", "#7a1e74");
	gradient5.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "100%").attr("stop-color", "#ffffff");

	var gradient6 = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "domain_gradient5")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "0").attr("y1", "1").attr("x2", "6.12").attr("y2", "0").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
	gradient6.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "0%").attr("stop-color", "#623e32");
	gradient6.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "50%").attr("stop-color", "#7a1e74");
	gradient6.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "60%").attr("stop-color", "#7a1e74");
	gradient6.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "100%").attr("stop-color", "#ffffff");

}


function draw_domain (length, height, type){

	var offset = 10;
	var curve_overlap = 10 ;
	var start = "M0,0";
	var line_to_end = "L"+length+",0";
	var ragged_end  = 0;
	var ragged_offset = 3;
	var ragged_iterator = parseFloat(1/6);
	// straight line
	  // var end_down = "L"+length+","+height;
	//var end_down = "A30,50 0 0,1 100,100";
	  // var end_down = "S "+length*1.3+","+height/2+" "+length+","+height
	var curved_end_down =  "S "+(length+curve_overlap)+","+height/2+" "+length+","+height;
	var ragged_end_down = 	"L"+(length-ragged_offset)+","+(height*(ragged_iterator * 1)) +
	"L"+length+","+(height*(ragged_iterator * 2)) +
	"L"+(length-ragged_offset)+","+(height*(ragged_iterator * 3)) +
	"L"+length+","+(height*(ragged_iterator * 4)) +
	"L"+(length-ragged_offset)+","+(height*(ragged_iterator * 5)) +
	"L"+length+","+height
	
	var end_down = "L"+length+","+height;
	var end_down = ragged_end? curved_end_down: ragged_end_down;
	
	
	var line_to_start = "L0,"+height;
	// var start_up = "L0,0";
	var start_up = "S "+(-curve_overlap)+","+height/2+" 0,0";
	


	
	var full_path = start+""+line_to_end+""+end_down+""+line_to_start+""+start_up;
	// var path = "M"+i*1",
	// console.log("full path is "+full_path)
	return full_path;

}

var example_sequence2 = {
      "dom_count": 149,
      "length": "1023",
      "regions": [
        {
          "modelStart": "1",
          "modelEnd": "258",
          "endStyle": "jagged",
          "end": "453",
          "display": true,
          "startStyle": "curved",
          "color": "#2849a3",
          "aliEnd": "452",
          "modelLength": "259",
          "text": "Pkinase_Tyr",
          "href": "http:\/\/pfam.xfam.org\/family\/PF07714.12",
          "type": "pfama",
          "metadata": {
            "scoreName": "e-value",
            "score": "5.4e-99",
            "_uniq": 1,
            "description": "Protein tyrosine kinase",
            "bitscore": "319.7",
            "end": "453",
            "accession": "PF07714.12",
            "database": "pfam",
            "aliEnd": "452",
            "identifier": "Pkinase_Tyr",
            "type": "Domain",
            "aliStart": "201",
            "start": "201"
          },
          "aliStart": "201",
          "clan": "CL0016",
          "start": "201"
        },
        {
          "modelStart": "3",
          "modelEnd": "111",
          "endStyle": "curved",
          "end": "1023",
          "display": true,
          "startStyle": "jagged",
          "color": "#286aa3",
          "aliEnd": "1023",
          "modelLength": "111",
          "text": "F_actin_bind",
          "href": "http:\/\/pfam.xfam.org\/family\/PF08919.5",
          "type": "pfama",
          "metadata": {
            "scoreName": "e-value",
            "score": "8.5e-34",
            "_uniq": 3,
            "description": "F-actin binding",
            "bitscore": "105.0",
            "end": "1023",
            "accession": "PF08919.5",
            "database": "pfam",
            "aliEnd": "1023",
            "identifier": "F_actin_bind",
            "type": "Domain",
            "aliStart": "918",
            "start": "916"
          },
          "aliStart": "918",
          "clan": null,
          "start": "916"
        },
        {
          "modelStart": "1",
          "modelEnd": "77",
          "endStyle": "curved",
          "end": "161",
          "display": true,
          "startStyle": "curved",
          "color": "#a3287a",
          "aliEnd": "161",
          "modelLength": "77",
          "text": "SH2",
          "href": "http:\/\/pfam.xfam.org\/family\/PF00017.19",
          "type": "pfama",
          "metadata": {
            "scoreName": "e-value",
            "score": "1.2e-26",
            "_uniq": 4,
            "description": "SH2 domain",
            "bitscore": "81.8",
            "end": "161",
            "accession": "PF00017.19",
            "database": "pfam",
            "aliEnd": "161",
            "identifier": "SH2",
            "type": "Domain",
            "aliStart": "86",
            "start": "86"
          },
          "aliStart": "86",
          "clan": "CL0541",
          "start": "86"
        },
        {
          "modelStart": "1",
          "modelEnd": "48",
          "endStyle": "curved",
          "end": "72",
          "display": true,
          "startStyle": "curved",
          "color": "#cc5b32",
          "aliEnd": "72",
          "modelLength": "48",
          "text": "SH3_1",
          "href": "http:\/\/pfam.xfam.org\/family\/PF00018.23",
          "type": "pfama",
          "metadata": {
            "scoreName": "e-value",
            "score": "1.3e-15",
            "_uniq": 5,
            "description": "SH3 domain",
            "bitscore": "46.0",
            "end": "72",
            "accession": "PF00018.23",
            "database": "pfam",
            "aliEnd": "72",
            "identifier": "SH3_1",
            "type": "Domain",
            "aliStart": "26",
            "start": "26"
          },
          "aliStart": "26",
          "clan": "CL0010",
          "start": "26"
        }
      ],
      "arch": "233893809080366",
      "title": "Sequence Features",
	  "markups": [],
	  "motifs": []
    }


var example_sequence = {
"length": 3460,
"regions": [
    {
        "modelStart": "1",
        "modelEnd": "195",
        "endStyle": "curved",
        "end": 2699,
        "display": true,
        "startStyle": "curved",
        "color": "#98cc32",
        "aliEnd": 2699,
        "modelLength": 195,
        "text": "BRCA-2_helical",
        "href": "http://pfam.xfam.org/family/PF09169.5",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "3.5e-101",
            "_uniq": 1,
            "description": "BRCA2, helical",
            "bitscore": 325.350524902344,
            "end": "2699",
            "accession": "PF09169.5",
            "database": "pfam",
            "aliEnd": 2699,
            "identifier": "BRCA-2_helical",
            "type": "Domain",
            "aliStart": 2511,
            "start": "2511"
        },
        "aliStart": 2511,
        "clan": null,
        "start": 2511
    },
    {
        "modelStart": "1",
        "modelEnd": "35",
        "endStyle": "curved",
        "end": 1038,
        "display": true,
        "startStyle": "curved",
        "color": "#371e7a",
        "aliEnd": 1038,
        "modelLength": 35,
        "text": "BRCA2",
        "href": "http://pfam.xfam.org/family/PF00634.13",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "3.0e-15",
            "_uniq": 2,
            "description": "BRCA2 repeat",
            "bitscore": 44.0078163146973,
            "end": "1038",
            "accession": "PF00634.13",
            "database": "pfam",
            "aliEnd": 1038,
            "identifier": "BRCA2",
            "type": "Family",
            "aliStart": 1004,
            "start": "1004"
        },
        "aliStart": 1004,
        "clan": null,
        "start": 1004
    },
    {
        "modelStart": "1",
        "modelEnd": "35",
        "endStyle": "curved",
        "end": 1253,
        "display": true,
        "startStyle": "curved",
        "color": "#371e7a",
        "aliEnd": 1253,
        "modelLength": 35,
        "text": "BRCA2",
        "href": "http://pfam.xfam.org/family/PF00634.13",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "2.0e-09",
            "_uniq": 3,
            "description": "BRCA2 repeat",
            "bitscore": 25.367561340332,
            "end": "1253",
            "accession": "PF00634.13",
            "database": "pfam",
            "aliEnd": 1253,
            "identifier": "BRCA2",
            "type": "Family",
            "aliStart": 1219,
            "start": "1219"
        },
        "aliStart": 1219,
        "clan": null,
        "start": 1219
    },
    {
        "modelStart": "7",
        "modelEnd": "34",
        "endStyle": "jagged",
        "end": 1463,
        "display": true,
        "startStyle": "jagged",
        "color": "#371e7a",
        "aliEnd": 1462,
        "modelLength": 35,
        "text": "BRCA2",
        "href": "http://pfam.xfam.org/family/PF00634.13",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "3.6e-13",
            "_uniq": 4,
            "description": "BRCA2 repeat",
            "bitscore": 37.3688583374023,
            "end": "1463",
            "accession": "PF00634.13",
            "database": "pfam",
            "aliEnd": 1462,
            "identifier": "BRCA2",
            "type": "Family",
            "aliStart": 1435,
            "start": "1432"
        },
        "aliStart": 1435,
        "clan": null,
        "start": 1432
    },
    {
        "modelStart": "3",
        "modelEnd": "34",
        "endStyle": "jagged",
        "end": 1566,
        "display": true,
        "startStyle": "jagged",
        "color": "#371e7a",
        "aliEnd": 1565,
        "modelLength": 35,
        "text": "BRCA2",
        "href": "http://pfam.xfam.org/family/PF00634.13",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "6.5e-15",
            "_uniq": 5,
            "description": "BRCA2 repeat",
            "bitscore": 42.9266929626465,
            "end": "1566",
            "accession": "PF00634.13",
            "database": "pfam",
            "aliEnd": 1565,
            "identifier": "BRCA2",
            "type": "Family",
            "aliStart": 1534,
            "start": "1532"
        },
        "aliStart": 1534,
        "clan": null,
        "start": 1532
    },
    {
        "modelStart": "1",
        "modelEnd": "34",
        "endStyle": "jagged",
        "end": 1710,
        "display": true,
        "startStyle": "curved",
        "color": "#371e7a",
        "aliEnd": 1710,
        "modelLength": 35,
        "text": "BRCA2",
        "href": "http://pfam.xfam.org/family/PF00634.13",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "9.4e-18",
            "_uniq": 6,
            "description": "BRCA2 repeat",
            "bitscore": 52.0054969787598,
            "end": "1710",
            "accession": "PF00634.13",
            "database": "pfam",
            "aliEnd": 1710,
            "identifier": "BRCA2",
            "type": "Family",
            "aliStart": 1677,
            "start": "1677"
        },
        "aliStart": 1677,
        "clan": null,
        "start": 1677
    },
    {
        "modelStart": "3",
        "modelEnd": "35",
        "endStyle": "curved",
        "end": 2043,
        "display": true,
        "startStyle": "jagged",
        "color": "#371e7a",
        "aliEnd": 2043,
        "modelLength": 35,
        "text": "BRCA2",
        "href": "http://pfam.xfam.org/family/PF00634.13",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "3.5e-16",
            "_uniq": 7,
            "description": "BRCA2 repeat",
            "bitscore": 47.0057029724121,
            "end": "2043",
            "accession": "PF00634.13",
            "database": "pfam",
            "aliEnd": 2043,
            "identifier": "BRCA2",
            "type": "Family",
            "aliStart": 2011,
            "start": "2010"
        },
        "aliStart": 2011,
        "clan": null,
        "start": 2010
    },
    {
        "modelStart": "2",
        "modelEnd": "34",
        "endStyle": "jagged",
        "end": 2112,
        "display": true,
        "startStyle": "jagged",
        "color": "#371e7a",
        "aliEnd": 2111,
        "modelLength": 35,
        "text": "BRCA2",
        "href": "http://pfam.xfam.org/family/PF00634.13",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "3.7e-16",
            "_uniq": 8,
            "description": "BRCA2 repeat",
            "bitscore": 46.8995971679688,
            "end": "2112",
            "accession": "PF00634.13",
            "database": "pfam",
            "aliEnd": 2111,
            "identifier": "BRCA2",
            "type": "Family",
            "aliStart": 2079,
            "start": "2078"
        },
        "aliStart": 2079,
        "clan": null,
        "start": 2078
    },
    {
        "modelStart": "1",
        "modelEnd": "143",
        "endStyle": "curved",
        "end": 3222,
        "display": true,
        "startStyle": "curved",
        "color": "#32adcc",
        "aliEnd": 3222,
        "modelLength": 143,
        "text": "BRCA-2_OB3",
        "href": "http://pfam.xfam.org/family/PF09104.5",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "9.9e-70",
            "_uniq": 9,
            "description": "BRCA2, oligonucleotide/oligosaccharide-binding, domain 3",
            "bitscore": 221.59977722168,
            "end": "3222",
            "accession": "PF09104.5",
            "database": "pfam",
            "aliEnd": 3222,
            "identifier": "BRCA-2_OB3",
            "type": "Domain",
            "aliStart": 3084,
            "start": "3084"
        },
        "aliStart": 3084,
        "clan": null,
        "start": 3084
    },
    {
        "modelStart": "1",
        "modelEnd": "117",
        "endStyle": "jagged",
        "end": 2832,
        "display": true,
        "startStyle": "curved",
        "color": "#cc8432",
        "aliEnd": 2831,
        "modelLength": 118,
        "text": "BRCA-2_OB1",
        "href": "http://pfam.xfam.org/family/PF09103.5",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "6.4e-45",
            "_uniq": 10,
            "description": "BRCA2, oligonucleotide/oligosaccharide-binding, domain 1",
            "bitscore": 140.40397644043,
            "end": "2832",
            "accession": "PF09103.5",
            "database": "pfam",
            "aliEnd": 2831,
            "identifier": "BRCA-2_OB1",
            "type": "Domain",
            "aliStart": 2702,
            "start": "2702"
        },
        "aliStart": 2702,
        "clan": null,
        "start": 2702
    },
    {
        "modelStart": "1",
        "modelEnd": "42",
        "endStyle": "curved",
        "end": 2904,
        "display": true,
        "startStyle": "curved",
        "color": "#333333",
        "aliEnd": 2904,
        "modelLength": 42,
        "text": "Tower",
        "href": "http://pfam.xfam.org/family/PF09121.5",
        "type": "pfama",
        "metadata": {
            "scoreName": "e-value",
            "score": "1.0e-25",
            "_uniq": 11,
            "description": "Tower",
            "bitscore": 78.1909103393555,
            "end": "2904",
            "accession": "PF09121.5",
            "database": "pfam",
            "aliEnd": 2904,
            "identifier": "Tower",
            "type": "Domain",
            "aliStart": 2863,
            "start": "2863"
        },
        "aliStart": 2863,
        "clan": null,
        "start": 2863
    }
],
"arch": "76218951764462",
"title": "Sequence Features",
"markups": [],
"motifs": []
};


return domain_architectures_view;
};

function PfamGraphic(parent, sequence) {
  this._middleClickListenerAdded = false;

  this._imageParams = {
    headSizeCircle:  3,
    headSizeSquare:  6,
    headSizeDiamond: 4,
    headSizeArrow:   3,
    headSizePointer: 3,
    headSizeLine:    3,

    sequenceEndPadding: 2,

    xOffset: 0,
    yOffset: 0,

    defaultMarkupHeight:         20,
    lollipopToLollipopIncrement: 7,
    bridgeToBridgeIncrement:     2,
    bridgeToLollipopIncrement:   5,
    largeJaggedSteps:            6,

    fontSize: "10px",

    regionHeight:    20,
    motifHeight:     14,
    motifOpacity:    0.6,
    labelPadding:    3,
    residueWidth:    0.5,
    xscale:          1.0,
    yscale:          1.0,
    envOpacity:      0.6,
    highlightWeight: 1,
    highlightColour: "#000000"
  };

  this._options = {
    baseUrl:   "",
    imageMap:  true,
    labels:    true,
    tips:      true,
    tipStyle:  "pfam",
    newCanvas: true
  };

  this._markupSpec = {
    valignValues:       ['top', 'bottom'],
    linesStyleValues:   ['mixed', 'bold', 'dashed'],
    lollipopHeadValues: ['diamond', 'circle', 'square', 'arrow', 'pointer', 'line'],
    regionEndValues:    ['curved', 'straight', 'jagged', 'arrow']
  };

  this._heights = {};
  this._areasHash = {};
  this._cache = {};
  this._saveLevel = 0;
  this._rendered_regions = {};
  this._highlighted = {};

  // support functions

  this._parseInt = function( value ) {
    if (value === undefined) {
      return;
    }
    var num = parseInt(value, 10);
    return (num !== "NaN") ? num : value;
  };

  this.capitalize = function (word) {
    return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();
  };

  this._getRGBColour = function (hexString) {

    var longHexMatches  = /^#?([A-F0-9]{6})$/i.exec(hexString),
      shortHexMatches = /^#?([A-F0-9]{3})$/i.exec(hexString),
      h, r, g, b, rgb;

    if ( longHexMatches === null && shortHexMatches === null ) {
      this._throw( "not a valid hex color ('" + hexString + "')" );
    }

    if ( longHexMatches !== null ) {
      h = longHexMatches[1];
      r = parseInt( h.substring( 0, 2 ), 16 );
      g = parseInt( h.substring( 2, 4 ), 16 );
      b = parseInt( h.substring( 4, 6 ), 16 );
    } else if ( shortHexMatches !== null ) {
      h = shortHexMatches[1];
      r = parseInt( "" + h.substring( 0, 1 ) + h.substring( 0, 1 ), 16 );
      g = parseInt( "" + h.substring( 1, 2 ) + h.substring( 1, 2 ), 16 );
      b = parseInt( "" + h.substring( 2, 3 ) + h.substring( 2, 3 ), 16 );
    }

    rgb = [ r, g, b ];
    rgb.r = r;
    rgb.g = g;
    rgb.b = b;

    return rgb;
  };

  // end support functions

  this.setParent = function( parent ) {
    this._parent = $(parent);
    if ( !this._parent.length ) {
      this._throw( "couldn't find the parent node" );
    }

    return this;
  };

  if ( parent !== undefined ) {
    this.setParent( parent );
  }

  this._walkSequence = function() {
    var self = this;
    var s = this._sequence;
    s.length = this._parseInt( s.length );
    $.each([ s.motifs, s.regions, s.markups ], function( j ) {
       $.each(this, function(i) {
         this.start    = self._parseInt( this.start );
         this.end      = self._parseInt( this.end );
         this.aliStart = self._parseInt( this.aliStart );
         this.aliEnd   = self._parseInt( this.aliEnd );
       });
    });
  };

  this._buildMarkups = function() {
    var self = this;

    var heights = { lollipops: { up:   [],
                                 down: [],
                                 markups: [],
                                 downMax: 0,
                                 upMax: 0 },
                    bridges:   { up:   [],
                                 down: [],
                                 markups: [],
                                 downMax: 0,
                                 upMax: 0 } },
        bridgeMarkups   = [],
        ip              = this._imageParams,
        ms              = this._markupSpec;

    var orderedMarkups = [];
    $.each(this._sequence.markups, function(i, markup ) {

      var start = Math.floor( markup.start );
      if ( start === "NaN" ) {
        this._throw( "markup start position is not a number: '" +
                     markup.start + "'" );
      }

      if ( orderedMarkups[markup.start] === undefined ) {
        orderedMarkups[markup.start] = [];
      }

      orderedMarkups[markup.start].push( markup );
    });

    orderedMarkups = $.map(orderedMarkups, function(i) {
          return i;
        });

    var residueWidth = this._imageParams.residueWidth;

    $.each(orderedMarkups, function( i, markup ) {

      var start = Math.floor( markup.start );
      if ( start === "NaN" ) {
        this._throw( "markup start position is not a number: '" +
               markup.start + "'" );
      }

      if ( markup.end === undefined ) {
        heights.lollipops.markups.push( markup );
      } else {
        bridgeMarkups.push( markup );
        return;
      }

      if ( markup.v_align !== undefined &&
           $.inArray(markup.v_align, ms.valignValues) === -1) {
        this._throw( "markup 'v_align' value is not valid: '" +
                     markup.v_align + "'" );
      }

      if ( markup.headStyle !== undefined &&
           $.inArray(markup.headStyle, ms.lollipopHeadValues) === -1) {
        this._throw( "markup 'headStyle' value is not valid: '" +
                     markup.headStyle + "'" );
      }

      var up = ( markup.v_align === undefined || markup.v_align === "top" );

      var h = up ? heights.lollipops.up : heights.lollipops.down;

      if ( h[ start - ( 1 / residueWidth ) ] !== undefined ||
           h[ start                        ] !== undefined ||
           h[ start + ( 1 / residueWidth ) ] !== undefined ) {

        var firstLollipopHeight = Math.max.apply(Math, h.slice( start - ( 1 / residueWidth ),
                                           start + ( 1 / residueWidth ) ));
        h[ start ] = firstLollipopHeight + ip.lollipopToLollipopIncrement;

      } else {

        h[start] = ip.defaultMarkupHeight;

      }

      var headSize = ip["headSize" + self.capitalize(markup.headStyle)];

      if ( up ) {
        heights.lollipops.upMax = Math.max( h[start] + headSize,
                                            heights.lollipops.upMax );
      } else {
        heights.lollipops.downMax = Math.max( h[start] + headSize,
                                              heights.lollipops.downMax );
      }

    });

    $.each(bridgeMarkups, function(i, bridgeMarkup ) {


      var bridge = { markup: bridgeMarkup };

      heights.bridges.markups.push( bridge );

      var start = Math.floor( bridgeMarkup.start );
      if ( start === "NaN" ) {
        this._throw( "bridge start position is not a number: '" + bridgeMarkup.start + "'" );
      }

      var end = Math.floor( bridgeMarkup.end );
      if ( end === "NaN" ) {
        this._throw( "bridge end position is not a number: '" + bridgeMarkup.end + "'" );
      }

      bridge.up = ( bridgeMarkup.v_align === undefined || bridgeMarkup.v_align === "top" );
      var hl = bridge.up ? heights.lollipops.up : heights.lollipops.down,
          hb = bridge.up ? heights.bridges.up   : heights.bridges.down;

      var maxBridgeHeight = Math.max.apply(Math, $.map(hb.slice( start, end ), function (i) { return i }));
      var bridgeHeight = ip.defaultMarkupHeight;

      if ( maxBridgeHeight === -Infinity ) {
        //do nothing
      }
      else {
        if ( $.inArray( bridgeHeight, $.map(hb.slice( start, end ), function (i) { return i})) >= 0) {
          bridgeHeight = maxBridgeHeight + ip.bridgeToBridgeIncrement;
        }
      }

      var maxLollipopHeight = Math.max.apply(Math, hl.slice( start - 4, end + 4 ));

      if ( maxLollipopHeight !== undefined ) {
        if ( ( maxLollipopHeight + ip.bridgeToLollipopIncrement ) >= bridgeHeight ) {
          bridgeHeight = maxLollipopHeight + ip.bridgeToLollipopIncrement;
        }
      }

      bridge.height = bridgeHeight;

      for (var i= start; i <= end ;i++) {
        if ( hb[i] === undefined ) {
          hb[i] = [];
        }
        hb[i].push( bridgeHeight );
      }

      if ( bridge.up ) {
        heights.bridges.upMax = Math.max( bridgeHeight, heights.bridges.upMax ) + 2;
      } else {
        heights.bridges.downMax = Math.max( bridgeHeight, heights.bridges.downMax ) + 2;
      }

    });

    this._heights = heights;

  };

  this.setImageParams = function ( params ) {
    if ( params !== undefined ) {
      if ( typeof params !== "object" ) {
        this._throw( "'imageParams' must be a valid object" );
      }
      this._imageParams = $.extend( this._imageParams, params );
    }
  };

  this.setSequence = function( sequence ) {

    if ( typeof sequence !== "object" ) {
      this._throw( "must supply a valid sequence object" );
    }

    if ( sequence.length === undefined ) {
      this._throw( "must specify a sequence length" );
    }

    if ( isNaN( sequence.length ) ) {
      this._throw( "sequence length must be a valid number" );
    }

    if ( parseInt( sequence.length, 10 ) <= 0 ) {
      this._throw( "sequence length must be a positive integer" );
    }

    if ( sequence.regions !== undefined ) {
      if ( typeof sequence.regions !== "object" ) {
        this._throw( "'regions' must be a valid object" );
      }
    }
    else {
      sequence.regions = [];
    }

    if ( sequence.markups !== undefined ) {
      if ( typeof sequence.markups !== "object" ) {
        this._throw( "'markups' must be a valid object" );
      }
    }
    else {
      sequence.markups = [];
    }

    if ( sequence.motifs !== undefined ) {
      if ( typeof sequence.motifs !== "object" ) {
        this._throw( "'motifs' must be a valid object" );
      }
    }
    else {
      sequence.motifs = [];
    }

    if ( sequence.options !== undefined ) {
      if ( typeof sequence.options !== "object" ) {
        this._throw( "'options' must be a valid object" );
      }
      this._options = $.extend( this._options, sequence.options );
    }

    if ( sequence.imageParams !== undefined ) {
      if ( typeof sequence.imageParams !== "object" ) {
        this._throw( "'imageParams' must be a valid object" );
      }
      this.setImageParams( sequence.imageParams );
    }

    this._sequence = sequence;

    this._walkSequence();

    this._imageWidth = (this._sequence.length * this._imageParams.residueWidth) + this._imageParams.sequenceEndPadding;

    if (this._parent.width() < this._imageWidth) {
      this._imageWidth = this._parent.width();
    }

    this._regionHeight = this._imageParams.regionHeight;

    this._seqHeight = Math.round( this._regionHeight / 6 );

    this._seqStep   = Math.round( this._seqHeight / 5 );

    this._buildMarkups();

    this._canvasHeight = Math.max.apply(Math, [ this._heights.lollipops.upMax,
                           this._heights.bridges.upMax,
                           ( this._regionHeight / 2 + 1 ) ]) +
                         Math.max.apply(Math, [ this._heights.lollipops.downMax,
                           this._heights.bridges.downMax,
                           ( this._regionHeight / 2 + 1 ) ]) + 5;

    this._canvasHeight *= this._imageParams.yscale;

    if ( this._sequence.highlight !== undefined ) {
      this._canvasHeight += ( 5 + Math.ceil( this._imageParams.highlightWeight / 2 ) );
    }

    this._canvasWidth = this._imageWidth + 1 + (this._imageParams.sequenceEndPadding * 2);

    this._canvasWidth *= this._imageParams.xscale;

    this._baseline = Math.max.apply(Math, [ this._heights.lollipops.upMax,
                       this._heights.bridges.upMax,
                       this._imageParams.regionHeight / 2 ]) + 1;

    return this;
  };

  if ( sequence !== undefined ) {

    this.setSequence( sequence );
  }

  this._throw = function( message ) {
    throw { name: "PfamGraphicException",
            message: message,
            toString: function() { return this.message; } };
  };

  this.highlight = function(params) {
    // return unless we have a region name
    if ( params.uniq === undefined ) {
      return;
    }

    if (this._rendered_regions[params.uniq] === undefined) {
      return;
    }

    if ( params.status === undefined || params.status === 'on') {
      // highlight the named region
      if(!this._highlighted[params.uniq]) {
        this._highlighted[params.uniq] = [];
      }
      for (var i = 0; i < this._rendered_regions[params.uniq].length; i++) {
        this._highlighted[params.uniq][i] = this._rendered_regions[params.uniq][i].glow({width: 5, opacity:0.6});
      }
    }
    else {
      // turn off the highlight
      for (var i = 0; i < this._highlighted[params.uniq].length; i++) {
        this._highlighted[params.uniq][i].remove();
      }
      delete this._highlighted[params.uniq];
    }
  }

  this.render = function( parent, sequence ) {

    if ( sequence !== undefined ) {
      this.setSequence( sequence );
    }
	console.log("rendering");
    if ( parent !== undefined ) {
      this.setParent( parent );
    }

    if ( this._sequence === undefined ) {
      this._throw( "sequence was not supplied" );
    }

    if ( this._options.newCanvas &&
         this._parent === undefined ) {
      this._throw( "parent node was not supplied" );
    }

    if ( ( ! this._canvas ) || this._options.newCanvas ) {
      this._buildCanvas( this._canvasWidth, this._canvasHeight );
    }

    var all_elements = this._draw();
    this._drawTitle(all_elements);

    // draw the sliding marker
    var marker = this._canvas.rect(-100, 0, 1, this._canvas.height)
      .attr({"fill" : "#666666", "stroke-opacity" : 0});

    var self = this;
    function scale(coord, orig, desired) {
      var scaled = (desired * coord) / orig;
      return scaled;
    };

    this._parent.find('svg').on('coverage.move', function (e, position) {
      var seq_length_in_px = (self._canvas.width - 100) - (self._labelWidth + 7);
      var x = Math.round(scale(position, self._sequence.length, seq_length_in_px ) + 100);
      marker.attr({x: x});
    });
    // end the sliding marker

    return this;
  };

  this._drawTitle = function (graphics) {
    if (this._sequence.title === undefined) {
      return;
    }
    //shift all the graphics to the right
    graphics.transform("t100,0");
    this._canvas.setSize(this._canvas.width + 100, this._canvas.height);
    this._canvas.text(50, (this._canvas.height / 2) - 2, this._sequence.title);
  };

  this.resize = function(width, height) {

    if (width > this._canvasWidth) {
      return;
    }

    if(!width) {
      width = this._canvasWidth;
    }
    if (!height) {
      height = this._canvasHeight;
    }

    var seq_length = this._sequence.length * this._imageParams.residueWidth;

    if (this._sequence.title) {
      seq_length = seq_length + 100;
    }

    if (this._labelWidth) {
      seq_length = seq_length + this._labelWidth + 5;
    }

    this._canvas.setSize(width, height);
    this._canvas.setViewBox(0, 0, seq_length, height);
    return this;
  }

  this._buildCanvas = function( width, height ) {
    var wrapperDiv = this._parent.closest("div");
    if ( wrapperDiv && width > wrapperDiv.scrollWidth ) {
      this._parent.addClassName( "canvasScroller" );
    }

    var canvas = Raphael(this._parent.get(0), width, height);

    this._canvas = canvas;

    if ( this._canvas === undefined || this._canvas === null ) {
      this._throw( "couldn't find the canvas node" );
    }

    this._areasList = [];

    return this;
  };

  this._drawRegion = function( region ) {

    if ($.inArray(region.startStyle, this._markupSpec.regionEndValues) === -1) {
      this._throw( "region start style is not valid: '" + region.startStyle + "'" );
    }

    if ($.inArray(region.endStyle, this._markupSpec.regionEndValues) === -1) {
      this._throw( "region end style is not valid: '" + region.endStyle + "'" );
    }

    var height = Math.floor( this._regionHeight ) - 2,
        radius = Math.round( height / 2 ),
        arrow  = radius,
        width  = ( region.end - (region.start + 1) ) * this._imageParams.residueWidth + 1,

        x = Math.max( 1, Math.floor( region.start * this._imageParams.residueWidth )),
        y = Math.floor( this._baseline - radius ) + 0.5;


    if ((arrow * 2) > width) {
      arrow = (width/2);
      radius = arrow;
    }

    var  regionParams = {
          x: x,
          y: y,
          w: width,
          h: height,
          r: radius,
          a: arrow,
          s: region.startStyle,
          e: region.endStyle
        };


    var path = this._buildRegionPath( regionParams, region);

    var fill = "90-#fff-" + region.color + ":50-" + region.color+ ":70-#fff";
    var glyph = this._canvas.path(path).attr({stroke: region.color, fill: fill});

    if (region.metadata) {

      if (!this._rendered_regions[region.metadata._uniq]) {
        this._rendered_regions[region.metadata._uniq] = [];
      }

      this._rendered_regions[region.metadata._uniq].push(glyph);
    }

    var areas;
    if ( region.aliStart !== undefined && region.aliEnd !== undefined ) {
      areas = this._drawEnvelope( region, radius, height );
    }

    if ( this._options.labels ) {
      this._drawText( x, this._baseline, width, region.text );
    }

    var area = this._canvas.rect(x,y,width,height).attr({opacity: 0, fill: '#000'});

    this._buildTip( region, area );

  };

  this._buildTip = function( item, glyph, type) {
    if ($.fn.qtip === undefined) return;

    if ( item.metadata === undefined ) {
      return;
    }

    var md = item.metadata;

    var tipTitle;
    if ( md.accession !== undefined && md.identifier !== undefined ) {
      tipTitle = md.identifier + " (" + md.accession.toUpperCase() + ")";
    } else if ( md.identifier !== undefined ) {
      tipTitle = md.identifier;
    } else if ( md.accession !== undefined ) {
      tipTitle = md.accession.toUpperCase();
    } else {
      tipTitle = md.type;
    }

    var coords = '<span class="inactive">n/a</span>';
    if ( md.start !== undefined && md.end !== undefined ) {
      coords = md.start + " - " + md.end;
      if ( md.aliStart !== undefined && md.aliEnd !== undefined ) {
        coords = coords.concat( " (alignment region " + md.aliStart + " - " + md.aliEnd + ")" );
      }
    }

    var desc = ( md.description || '<span class="inactive">n/a</span>' );
    if (md.accession) {
      desc = desc + ' [<a href="' + item.href  + '" class="ext">' + md.database + '</a>]';
    }
    if (type && type === 'motif') {
      if (md.href) {
        desc = md.description + ' [<a href="' + md.href + '" class="ext">' + md.src + '</a>]';
      }
    }

    var model = null;

    if (item.modelStart) {
      // work out the width of the match
      var match_width = item.modelEnd - item.modelStart + 1;
      var scaled_match_width = (match_width * 200) / item.modelLength;
      // work out the start
      var scaled_start = (item.modelStart - 1) / (item.modelLength / 200) ;
      var match = '<span style="width:' + scaled_match_width + 'px;background: '+
        item.color +';left:' + scaled_start + 'px"></span>';

      model = '1 <span class="model_position">' +  match  + '</span> ' + item.modelLength;
    }


    var tipBody = '    <dt>Description:</dt>' +
      '    <dd>' + desc  +'</dd>' +
      '    <dt>Coordinates:</dt>' +
      '    <dd>' + coords + '</dd>';

    if (model) {
      tipBody = tipBody +  '<dt>Model Match:</dt><dd>' + model + '</dd>';
    }

    tipBody = '<div class="tipContent"><dl>' + tipBody + '  </dl></div>';
    $(glyph.node).qtip({
      position: {
        viewport: $(window),
        my: 'bottom center',
        at: 'top center'
      },
      content: {
        title: tipTitle,
        text: tipBody
      },
      show: {
        solo: true
      },
      hide: {
        event: 'unfocus',
        inactive: 2000
      },
      style: {
        classes: 'ui-tooltip-hmmer ui-tooltip-rounded'
      }
    });
  }
  this._drawText = function( x, midpoint, regionWidth, text ) {

    var textX = x + ( regionWidth / 2 );
    var ts = this._canvas.text( textX, midpoint, text)
              .attr({stroke: '#eee', 'stroke-width': 2, 'stroke-opacity': 0.7});

    var bbox = ts.getBBox();

    if (bbox.width > regionWidth || bbox.height > this._regionHeight ) {
      ts.remove();
    }
    else {
      var t = this._canvas.text( textX, midpoint, text);
    }

  };

  this._drawEnvelope = function( region, radius, height ) {

    if ( parseInt( region.start, 10 ) > parseInt( region.aliStart, 10 ) ) {
      this._throw( "regions must have start <= aliStart (" + region.start + " is > " + region.aliStart + ")" );
    }

    if ( parseInt( region.end, 10 ) < parseInt( region.aliEnd, 10 ) ) {
      this._throw( "regions must have end >= aliEnd (" + region.end + " is < " + region.aliEnd + ")" );
    }

    var y  = this._baseline - radius,
        xs = this._imageParams.residueWidth,
        l,
        r;

    if ( region.aliStart &&
         region.aliStart > region.start ) {
      l = { x: Math.floor( region.start * xs ),
            y: Math.floor( y - 1 ) + 1,
            w: Math.floor( region.aliStart * xs ) - Math.floor( region.start * xs ) + 1,
            h: height + 1 };
    }

    if ( region.aliEnd &&
         region.aliEnd < region.end ) {
      r = { x: Math.floor( region.aliEnd * xs ) + 1,
            y: Math.floor( y - 1 ) + 1,
            w: Math.floor( region.end * xs ) - Math.floor( region.aliEnd * xs ),
            h: height + 1 };
    }

    var fillStyle = { opacity: this._imageParams.envOpacity,
                       fill: '#ffffff', stroke: '#ffffff' };

    if ( l !== undefined ) {
      this._canvas.rect( l.x, l.y, l.w, l.h ).attr(fillStyle);
    }

    if ( r !== undefined ) {
      this._canvas.rect( r.x, r.y, r.w, r.h ).attr(fillStyle);
    }

  };

  this._buildRegionPath = function( params, region ) {
    var path = "M";

    // move to top left of region
    // draw left side down to bottom of region
    switch ( params.s ) {
      case "curved":
        path += (params.x + params.r) + " " + params.y;
        path += this._drawLeftRounded( params.r, params.h );
        break;
      case "jagged":
        path += params.x + " " + params.y;
        path += this._drawJagged( params.x, params.y, params.h, true );
        break;
      case "straight":
        path += params.x + " " + params.y;
        path += "l0 " + params.h;
        break;
      case "arrow":
        path += (params.x + params.a) + " " + params.y;
        path += this._drawLeftArrow( params.a, params.h );
        break;
    }

    // draw horizontal line from bottom left to bottom right
    if ( params.s.match(/^curved|arrow$/) && params.e.match(/^curved|arrow$/) ) {
      var l_width = (params.w - (params.r * 2));
      if (l_width < 0) {
        l_width = 0;
      }
      path += "l" + l_width + " 0";
    }
    else if ( params.s.match(/^curved|arrow$/) || params.e.match(/^curved|arrow$/) ) {
      path += "l" + (params.w - params.r) + " 0";
    }
    else {
      path += "l" + params.w + " 0";
    }


    // draw right side up to top of region
    switch ( params.e ) {
      case "curved":
        path += this._drawRightRounded( params.r, params.h );
        break;
      case "jagged":
        path += this._drawJagged( params.x + params.w, params.y + params.h, params.h, false );
        break;
      case "straight":
        path += "l0 -" + params.h;
        break;
      case "arrow":
        path += this._drawRightArrow( params.a, params.h );
        break;
    }

    // close path - complete line from right to left top
    path += "z";
    return path;

  };

  this._drawRightRounded = function( radius, height ) {
    var radius = radius + 2;
    return "c" + radius + " " + 0 + " " + radius + " " + -height + " " + 0 + " " + -height;
  };

  this._drawLeftRounded = function( radius, height ) {
    var radius = radius + 2;
    return "c" + -radius + " " + 0 + " " + -radius + " " + height + " " + 0 + " " + height;
  };

  this._drawLeftArrow = function( arrow, height ) {
    var path = "l" + -arrow + " " + (height/2) + "l" + arrow + " " + (height/2);
    return path;
  };

  this._drawRightArrow = function( arrow, height ) {
    var path = "l" + arrow + " " + -(height/2) + "l" + -arrow + " " + -(height/2);
    return path;
  };

  this._drawJagged = function( x, y, height, left ) {

    var steps = parseInt( this._imageParams.largeJaggedSteps, 10 );
    steps += steps % 2;

    var yShifts = this._getSteps( height, steps );

    var step = height / steps;

    var path = '';

    for ( var i = 0; i < yShifts.length; i = i + 1 ) {
      if ( i % 2 !== 0 ) {
        if ( left ) {
          path += "L" + x + " " + (y + yShifts[i]);
        } else {
          path += "L" + x + " " + (y - yShifts[i]);
        }
      }
      else {
        if ( left ) {
          path += "L" + (x + step) + " " + (y + yShifts[i]);
        } else {
          path += "L" + (x - step) + " " + (y - yShifts[i]);
        }
      }
    }

    if ( left ) {
      path += "L" + x + " " + (y + height);
    } else {
      path += "L" + x + " " + (y - height);
    }
    return path;
  };

  this._getSteps = function( height, steps ) {

    var cacheKey = "shifts_" + height + "_" + steps;
    var list = this._cache[cacheKey];

    if ( list === undefined ) {

      var step = height / steps;

      var yShifts = [];
      for ( var i = 0; i < ( steps / 2 ); i = i + 1 ) {
        yShifts.push( ( height / 2 ) - ( i * step ) );
        yShifts.push( ( height / 2 ) + ( i * step ) );
      }

      list = $.unique(yShifts).sort( function (a, b) { return a - b; } );

      this._cache[cacheKey] = list;
    }

    return list;
  };

  this._drawBridge = function( bridge ) {
    var self = this;

    var start  = bridge.markup.start,
        end    = bridge.markup.end,
        height = bridge.height,
        up     = bridge.up,

        color = "#000000",

        x1 = Math.floor( start * this._imageParams.residueWidth ) + 1.5,
        x2 = Math.floor( end   * this._imageParams.residueWidth ) + 1.5,
        y1 = Math.round( up ? this._topOffset : this._botOffset ) + 0.5,
        y2,
        label,

        xo = this._imageParams.xOffset, // need X- and Y-offsets
        yo = this._imageParams.yOffset;


    if ( up ) {
      y2 = Math.ceil( this._baseline - height ) - 0.5;
    } else {
      y2 = Math.floor( this._baseline + height ) + 0.5;
    }

    if ( bridge.markup.color.match( "^\\#[0-9A-Fa-f]{6}$" ) ) {
      color = bridge.markup.color;
    }

    var path = "M" + x1 + " " + y1 + "L" + x1 + " " + y2 + "L" + x2 + " " + y2 + "L" + x2 + " " + y1;
    var strokeColor = color || "#000";
    this._canvas.path(path).attr({ 'stroke': strokeColor });

    var tip = {};

    if ( bridge.markup.metadata ) {
      var md = bridge.markup.metadata;

        tip.title = self.capitalize( md.type || "Bridge" );
        tip.body =
          '<div class="tipContent">' +
          '  <dl>' +
          '    <dt>Coordinates:</dt>' +
          '    <dd>' + md.start + '-' + md.end + '</dd>' +
          '    <dt>Source:</dt>' +
          '    <dd>' + ( md.database || '<span class="na">n/a</span>' ) + '</dd>' +
          '  </dl>' +
          '</div>';
    }

    var ys = [ y1, y2 ].sort(function( a, b ) { return a - b; } );
    this._areasList.push( { start:  start,
                            type:   "bridge-start",
                            color: color,
                            end:    end,
                            tip:    tip,
                            coords: [ xo + x1 - 1, yo + ys[0] - 1, 
                                      xo + x1 + 1, yo + ys[1] + 1 ] } );
    this._areasList.push( { start:  start,
                            type:   "bridge-horizontal",
                            color: color,
                            end:    end,
                            tip:    tip,
                            coords: [ xo + x1 - 1, yo + ys[1] - 1, 
                                      xo + x2 + 1, yo + ys[1] + 1 ] } );
    this._areasList.push( { start:  start,
                            type:   "bridge-end",
                            color: color,
                            end:    end,
                            tip:    tip,
                            coords: [ xo + x2 - 1, yo + ys[0] - 1, 
                                      xo + x2 + 1, yo + ys[1] + 1 ] } );

  };

  this._drawLollipopHead = function( x, y1, y2, start, up, style, color, lineColour, tip, metadata ) {

    var xo = this._imageParams.xOffset,
        yo = this._imageParams.yOffset,
        r,
        d;

    switch ( style ) {

      case "circle":
        r = this._imageParams.headSizeCircle;

        var strokeColor = color || "#f00";
        this._canvas.circle(x, y2, r).attr({ fill: strokeColor, stroke: strokeColor });

        this._areasList.push( { tip:      tip,
                                type:     "lollipop-head",
                                shape:    "circle",
                                color:   color || "red",
                                start:    start,
                                coords:   [ xo + x - r, yo + y2 - r, 
                                            xo + x + r, yo + y2 + r ] } );
        break;

      case "square":
        d = this._imageParams.headSizeSquare / 2;
        var strokeColor = color || "#64C809"; //rgb(100, 200, 9)
        this._canvas.rect(x - d, y2 - d, d * 2, d * 2)
                      .attr({ fill: strokeColor, stroke: strokeColor });

        this._areasList.push( { tip:      tip,
                                type:     "lollipop-head",
                                start:    start,
                                color:   color || "rgb(100, 200, 9)",
                                coords:   [ xo + x - d, yo + y2 - d, 
                                            xo + x + d, yo + y2 + d ] } );
        break;

      case "diamond":
        d = this._imageParams.headSizeDiamond;
        var strokeColor = color || "#64C809";
        this._canvas.rect(x - (d/2), y2 - (d/2), d, d)
                      .attr({ fill: strokeColor, stroke: strokeColor })
                      .rotate(45);

        this._areasList.push( { tip:      tip,
                                ty2pe:     "lollipop-head",
                                shape:    "poly",
                                start:    start,
                                color:   color || "rgb(100, 200, 9)",
                                coords:   [ xo + x - d, yo + y2 - d, 
                                            xo + x + d, yo + y2 + d ] } );
        break;

      case "line":
        d = this._imageParams.headSizeLine;
        var path = "M" + x + " " + (y2 - d) + "L" + x + " " + (y2 + d);
        var strokeColor = color || "#3228ff"; // rgb(50, 40, 255)
        this._canvas.path(path).attr({ 'stroke': strokeColor });
        this._areasList.push( { tip:      tip,
                                type:     "lollipop-head",
                                start:    start,
                                color:   color || "rgb(50, 40, 255)",
                                coords:   [ xo + x - 1, yo + y2 - d - 1,
                                            xo + x + 1, yo + y2 + d + 1 ] } );
        break;

      case "arrow":
        d = this._imageParams.headSizeArrow;

        var coords;
        if ( up ) {
          var path = "M" + x + " " + y2 + "L" + x + " " + (y2 - d);
          var strokeColor = lineColour || "#000";
          this._canvas.path(path).attr({ 'stroke': strokeColor });

          var path = "M" + (x - d)  + " " + (y2 + d * 0.5) + "L" + x + " " + (y2 - d) + "L" + (x + d) + " " + (y2 + d * 0.5);
          var strokeColor = color || "#3228ff"; // rgb(50, 40, 255)
          this._canvas.path(path).attr({ 'stroke': strokeColor });

          coords = [ xo + x - d, yo + y2, 
                     xo + x + d, yo + y2 + d * 0.5 ];
        } else { 
          this._context.beginPath();
          this._context.moveTo( x,     y2  );
          this._context.lineTo( x,     y2 + d );
          this._context.strokeStyle = lineColour || "#000000";  
          this._context.stroke();
          this._context.beginPath();
          this._context.moveTo( x - d, y2 - d * 0.5 );
          this._context.lineTo( x,     y2 + d );
          this._context.lineTo( x + d, y2 - d * 1.5 );


          coords = [ xo + x - d, yo + y2 - d * 1.5, 
                     xo + x + d, yo + y2 - d ];
        }
        this._areasList.push( { tip:      tip,
                                type:     "lollipop-head",
                                color:   color || "rgb(50, 40, 255)",
                                start:    start,
                                shape:    "poly",
                                coords:   coords } );
        break;

      case "pointer":
        d = this._imageParams.headSizePointer;

        var coords;
        if ( up ) {
          var path = "M" + (x - d) + " " + (y1 - d * 1.5) + "L" + x + " " + (y1) + "L" + ( x + d) + " " + (y1 - d * 1.5);
          var strokeColor = color || "#3228ff"; // rgb(50, 40, 255)
          this._canvas.path(path).attr({ 'stroke': strokeColor });
          coords = [ xo + x - d, yo + y1, 
                     xo + x + d, yo + y1 - d ];
        } else { 
          var path = "M" + (x - d) + " " + (y1 + d * 1.5) + "L" + x + " " + (y1) + "L" + ( x + d) + " " + (y1 + d * 1.5);
          var strokeColor = color || "#3228ff"; // rgb(50, 40, 255)
          this._canvas.path(path).attr({ 'stroke': strokeColor });
          coords = [ xo + x - d, yo + y1 + d, 
                     xo + x + d, yo + y1 ];
        }

        this._areasList.push( { tip:      tip,
                                type:     "lollipop-head",
                                color:   color || "rgb(50, 40, 255)",
                                start:    start,
                                shape:    "poly",
                                coords:   coords } );
        break;
    }

  };

  this._drawHit = function( hit ) {
    var self = this;
    var xs = this._imageParams.residueWidth;
    var len = Math.floor(hit.tend * xs) - Math.floor(hit.tstart * xs);
    var fillStyle = {
      fill: '#666666',
      stroke: '#000000',
      opacity: 1
    };
    var x = Math.floor( hit.tstart * xs )
    var y = this._canvasHeight - 4;
    var glyph = this._canvas.rect( x, y, len, 2 ).attr(fillStyle);

    $(glyph.node).qtip({position: {
        viewport: $(window),
        my: 'left top',
        at: 'right center'
      },
      content: {
        title: 'Match Coordinates',
        text: '<dl class="narrow"><dt>Target: </dt><dd>' + hit.tstart + ' - ' + hit.tend + '</dd><dt>Query: </dt><dd>' + hit.qstart + ' - ' + hit.qend + '</dd></dl>'
      },
      show: {
        solo: true
      },
      style: {
        classes: 'ui-tooltip-hmmerdist ui-tooltip-rounded'
      }
    });
  };

  this._drawLollipop = function( markup ) {
    var self = this;

    var start = markup.start,

        up = markup.v_align === undefined || markup.v_align === "top",

        x1 = Math.floor( start * this._imageParams.residueWidth ) + 1.5,
        y1,
        y2;

    if ( up ) {
      y1 = Math.round( this._topOffset + 1 ) - 0.5;
      y2 = Math.floor( y1 - this._heights.lollipops.up[start] + ( this._baseline - this._topOffset ) + 1 );
    } else {
      y1 = Math.round( this._botOffset + 1 ) - 0.5;
      y2 = Math.ceil( y1 + this._heights.lollipops.down[start] - ( this._botOffset - this._baseline ) - 1 );
    }

    var path = "M" + x1 + " " + y1 + "L" + x1 + " " + y2;
    var strokeColor = markup.lineColour || "#000000";
    this._canvas.path(path).attr({ 'stroke': strokeColor });

    var xo = this._imageParams.xOffset,
        yo = this._imageParams.yOffset;

    var ys = [ y1, y2 ].sort(function( a, b ) { return a - b; } );
    var area = { start:    start,
                 type:     "lollipop",
                 coords:   [ xo + Math.floor( x1 ) - 1, yo + ys[0] - 1, 
                             xo + Math.floor( x1 ) + 1, yo + ys[1] + 1 ] };
    this._areasList.push( area );

    if ( markup.href !== undefined ) {
      area.href = markup.href;
    }

    var tip = {};

    if ( markup.metadata ) {
      var md = markup.metadata;

        tip.title = self.capitalize( md.type || "Annotation" );
        tip.body =
          '<div class="tipContent">' +
          '  <dl>' +
          '    <dt>Description:</dt>' +
          '    <dd>' + md.description + '</dd>' +
          '    <dt>Position:</dt>' +
          '    <dd>' + md.start + '</dd>' +
          '    <dt>Source:</dt>' +
          '    <dd>' + ( md.database || '<span class="na">n/a</span>' ) + '</dd>' +
          '  </dl>' +
          '</div>';
    }
    area.tip = tip;

    if ( markup.headStyle ) {
      this._drawLollipopHead( x1, y1, y2, start, up, markup.headStyle,
                              markup.color, markup.lineColour, area.tip,
                              markup.metadata );
    }

  };

  this._draw = function() {

    var self = this;
    this._canvas.setStart();

    if ( this._applyImageParams ) {

      var ip = this._imageParams;

      this._applyImageParams = false;
    }

    var seqArea = this._drawSequence();

    $.each(this._heights.bridges.markups, function(i, bridge ) {
      if ( bridge.display !== undefined &&
           bridge.display !== null &&
           ! bridge.display ) {
        return;
      }
      self._drawBridge( bridge );
    });

    $.each(this._heights.lollipops.markups.reverse(), function(i, lollipop ) {
      if ( lollipop.display !== undefined &&
           lollipop.display !== null &&
           ! lollipop.display ) {
        return;
      }
      self._drawLollipop( lollipop );
    });

    $.each(this._sequence.regions, function(i, region) {
      if ( region.display !== undefined &&
           region.display !== null &&
           ! region.display ) {
        return;
      }
      self._drawRegion( region );
    });

    if (this._sequence.hits) {
      $.each(this._sequence.hits, function(i, hit) {
        self._drawHit( hit );
      });
    }

    $.each(this._sequence.motifs, function(i, motif ) {
      if ( motif.display !== undefined &&
           motif.display !== null &&
           ! motif.display ) {
        return;
      }
      self._drawMotif( motif );
    });

    if ( this._sequence.highlight !== undefined &&
         parseInt( this._sequence.highlight.start, 10 ) &&
         parseInt( this._sequence.highlight.end, 10 ) ) {
      this._drawHighlight();
    }

    return this._canvas.setFinish();
  };

  this._drawMotif = function( motif ) {
    var self = this;

    motif.start = parseInt( motif.start, 10 );
    motif.end   = parseInt( motif.end,   10 );

    var height = Math.floor( this._imageParams.motifHeight ) - 2,
        radius = Math.round( height / 2 ),
        width  = ( motif.end - motif.start + 1 ) * this._imageParams.residueWidth,

        x = Math.max( 1, Math.floor( motif.start * this._imageParams.residueWidth ) + 1 ),
        y = Math.floor( this._baseline - radius ) + 0.5;

    var motifColour;

    var glyph = undefined;

    if ( motif.color instanceof Array ) {

      if ( motif.color.length !== 3 ) {
        this._throw( "motifs must have either one or three colors" );
      }

      color = [];

      var ip = this._imageParams;

      $.each(motif.color, function( i, c ) {
        var rgbColour = self._getRGBColour( c );
        color.push( { rgb:  "rgb("  + rgbColour.join(",") + ")",
                       rgba: "rgba(" + rgbColour.join(",") + "," + ip.motifOpacity + ")" } );
      });

      var step   = Math.round( height / 3 );
      for ( var i = 0; i < 3; i = i + 1 ) {
        glyph = this._canvas.rect(x, y + ( step * i), width, step).attr({fill: color[i].rgb, 'stroke-opacity':0});
      }

    }
    else {

      color = this._getRGBColour( motif.color );
      var rgb  = "rgb(" + color.join(",") + ")";
      var rgba = "rgba(" + color.join(",") + "," + this._imageParams.motifOpacity + ")";

      glyph = this._canvas.rect(x, y, width, parseInt( height, 10 ) + 1 )
          .attr({fill:rgb, opacity: this._imageParams.motifOpacity, 'stroke-opacity':0 });

    }


    if ( motif.metadata            !== undefined &&
         motif.metadata.identifier !== undefined ) {
      motif.metadata.description = motif.metadata.identifier;
    } else if ( motif.text !== undefined ) {
      motif.metadata.description = motif.text;
    } else {
      motif.metadata.description = "motif, " + motif.start + " - " + motif.end;
    }

    var xo = this._imageParams.xOffset,
        yo = this._imageParams.yOffset;

    var area = { text:   motif.metadata.description,
                 type:   "motif",
                 start:  motif.aliStart || motif.start,
                 end:    motif.aliEnd   || motif.end,
                 color: color,
                 coords: [ xo + x,         yo + y,
                           xo + x + width, yo + y + height ] };
    this._areasList.push( area );

    if ( motif.href !== undefined ) {
      area.href = motif.href;
    }

    this._buildTip( motif, glyph, 'motif');

  };

  this._drawSequence = function() {

    this._topOffset = Math.floor( this._baseline - ( this._seqHeight / 2 ) );
    this._botOffset = Math.floor( this._baseline + ( this._seqHeight / 2 ) + 1 );

    var seq_length = this._sequence.length * this._imageParams.residueWidth;

    var gradient = this._canvas.rect( 1, this._topOffset + 0.5, seq_length, ( this._seqHeight / 2 ) * 3 );
    gradient.attr({ 'fill': '270-#999-#eee:40-#ccc:60-#999', 'stroke': 'none' });

    var lengthLabel = this._canvas.text((this._sequence.length * this._imageParams.residueWidth) + 5, this._topOffset + (this._seqHeight / 2), this._sequence.length);
    lengthLabel.attr({'text-anchor': 'start'});

    // now that we have a label, we are going to have to resize the canvas to fit it on.
    var labelWidth = lengthLabel.getBBox().width;
    this._labelWidth = labelWidth;
    this._canvas.setSize( this._canvasWidth + labelWidth, this._canvasHeight );



    var xo = this._imageParams.xOffset,
        yo = this._imageParams.yOffset;

    return { label:  "sequence",
             text:   "sequence",
             coords: [ xo,                    yo + this._topOffset,
                       xo + this._imageWidth, yo + this._topOffset + this._seqStep * 5 ] };
  };
}



hmmer_vis.histogram = function() {
	"use strict";
	var chart;

	// The cbak returned
	var histogram = function(div) {
		chart = nv.models.multiBarChart()
		//.transitionDuration(350)
		.reduceXTicks(true)   //If 'false', every single x-axis tick label will be rendered.
		.rotateLabels(0)      //Angle to rotate x-axis labels.
		.showControls(false)   //Allow user to switch between 'Grouped' and 'Stacked' mode.
		.groupSpacing(0.1)    //Distance between each group of bars.
		.stacked(true)
		.showXAxis(false);


		// chart.xAxis.tickFormat(d3.format(',f'));

		chart.yAxis.tickFormat(d3.format('f'));
		//chart.xAxis.rotateLabels(-45);
		d3.select('#histogram svg')
		.datum(_exampleData())
		.transition().duration(500)
		.call(chart);

		nv.utils.windowResize(chart.update);
		d3.selectAll(".nv-bar").on('click',
		function(){
			console.log("clicked");
		});

		return chart;
	};
	hmmer_vis.dispatch.on('update_histogram', function(args){
		// 	    //do something here
		var arr = [];
		if (typeof args !== 'undefined' && typeof args.hits_distribution !== 'undefined'){
			console.log("found some in histogram "+args.hits_distribution);
			for (var i = 0; i < args.hits_distribution.length; i++){
				arr.push({'x' : i , 'y' : args.hits_distribution[i]});
			};
			var new_object = [{'key': "all", "values":arr}];
			histogram.redraw(new_object);
		}
	})
	//

	histogram.redraw = function(hits_distribution) {
		var data = typeof hits_distribution !== 'undefined' ? hits_distribution : _exampleData();
		var example_data =_exampleData();
		console.log("redraw called");
		d3.select('#histogram svg')
		// chart
		.datum(data)
		.transition().duration(500)
		.call(chart);
		return histogram;
	}
	//Generate some nice data.
	function _exampleData() {
		var taxa = ['Eukaryota','Bacteria', 'Archaea', 'Viruses','unclassified', 'other'];

		var arr = [];
		for (var i = 0; i < 30; i++){
			arr.push(
					{key : 'all' , values : Math.floor((Math.random() * 50) + 1)}
					);
		}
		// return arr;
		 return stream_layers(6,10+Math.random()*30,.1).map(function(data, i) {
			return {
				key: taxa[i],
				values: data
			};
		});
	}


	function stream_layers(n, m, o) {
		if (arguments.length < 3) o = 0;
		function bump(a) {
			var x = 1 / (.1 + Math.random()),
			y = 2 * Math.random() - .5,
			z = 10 / (.1 + Math.random());
			for (var i = 0; i < m; i++) {
				var w = (i / m - y) * z;
				a[i] += x * Math.exp(-w * w);
			}
		}
		return d3.range(n).map(function() {
			var a = [], i;
			for (i = 0; i < m; i++) a[i] = o + o * Math.random();
			for (i = 0; i < 5; i++) bump(a);
			return a.map(stream_index);
		});
	}

	/* Another layer generator using gamma distributions. */
	function stream_waves(n, m) {
		return d3.range(n).map(function(i) {
			return d3.range(m).map(function(j) {
				var x = 20 * j / m - i / 3;
				return 2 * x * Math.exp(-.5 * x);
			}).map(stream_index);
		});
	}

	function stream_index(d, i) {
		return {x: i, y: Math.max(0, d)};
	}

	histogram.start_timer = function(){
		setInterval(function () {
			histogram.redraw();
		}, 1500);
	}

	return histogram;
};


hmmer_vis.hits_graphic = function() {
	"use strict";
	var chart;

    var conf = {};

	// The cbak returned
	var hits_graphic = function(div) {
		var sequence = "HKLNFLNLSDFLERJLERJLACMALSCMASLDKJASKLDJOERIEWPKAMSCMLAJ";

		var chart = new PfamGraphic('#domGraph', example_sequence);
		// var chart = new PfamGraphic();
		chart.render();
        var new_width = $('#domGraph').parent().width();
         chart.resize( new_width );

    return hits_graphic;
	};


	// hmmer_vis.dispatch.on('update', function(args){
// 	    //do something here
// 		console.log("I was told to  "+args.message);
// 		// pie_chart.redraw(args.count);
//})


    hits_graphic.redraw = function(pie_data) {
			return hits_graphic;
    }
	//Generate some nice data.
	function _exampleData() {
		var test_array = [];
	 	for (var letter in {'present':0,'complete':0, 'incomplete':0}) {
		   test_array.push({'label':letter, 'value': Math.random()*30})
	 	}
		return test_array;
	}
	var example_sequence = {
    "length": 3460,
    "regions": [
        {
            "modelStart": "1",
            "modelEnd": "195",
            "endStyle": "curved",
            "end": 2699,
            "display": true,
            "startStyle": "curved",
            "color": "#98cc32",
            "aliEnd": 2699,
            "modelLength": 195,
            "text": "BRCA-2_helical",
            "href": "http://pfam.xfam.org/family/PF09169.5",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "3.5e-101",
                "_uniq": 1,
                "description": "BRCA2, helical",
                "bitscore": 325.350524902344,
                "end": "2699",
                "accession": "PF09169.5",
                "database": "pfam",
                "aliEnd": 2699,
                "identifier": "BRCA-2_helical",
                "type": "Domain",
                "aliStart": 2511,
                "start": "2511"
            },
            "aliStart": 2511,
            "clan": null,
            "start": 2511
        },
        {
            "modelStart": "1",
            "modelEnd": "35",
            "endStyle": "curved",
            "end": 1038,
            "display": true,
            "startStyle": "curved",
            "color": "#371e7a",
            "aliEnd": 1038,
            "modelLength": 35,
            "text": "BRCA2",
            "href": "http://pfam.xfam.org/family/PF00634.13",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "3.0e-15",
                "_uniq": 2,
                "description": "BRCA2 repeat",
                "bitscore": 44.0078163146973,
                "end": "1038",
                "accession": "PF00634.13",
                "database": "pfam",
                "aliEnd": 1038,
                "identifier": "BRCA2",
                "type": "Family",
                "aliStart": 1004,
                "start": "1004"
            },
            "aliStart": 1004,
            "clan": null,
            "start": 1004
        },
        {
            "modelStart": "1",
            "modelEnd": "35",
            "endStyle": "curved",
            "end": 1253,
            "display": true,
            "startStyle": "curved",
            "color": "#371e7a",
            "aliEnd": 1253,
            "modelLength": 35,
            "text": "BRCA2",
            "href": "http://pfam.xfam.org/family/PF00634.13",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "2.0e-09",
                "_uniq": 3,
                "description": "BRCA2 repeat",
                "bitscore": 25.367561340332,
                "end": "1253",
                "accession": "PF00634.13",
                "database": "pfam",
                "aliEnd": 1253,
                "identifier": "BRCA2",
                "type": "Family",
                "aliStart": 1219,
                "start": "1219"
            },
            "aliStart": 1219,
            "clan": null,
            "start": 1219
        },
        {
            "modelStart": "7",
            "modelEnd": "34",
            "endStyle": "jagged",
            "end": 1463,
            "display": true,
            "startStyle": "jagged",
            "color": "#371e7a",
            "aliEnd": 1462,
            "modelLength": 35,
            "text": "BRCA2",
            "href": "http://pfam.xfam.org/family/PF00634.13",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "3.6e-13",
                "_uniq": 4,
                "description": "BRCA2 repeat",
                "bitscore": 37.3688583374023,
                "end": "1463",
                "accession": "PF00634.13",
                "database": "pfam",
                "aliEnd": 1462,
                "identifier": "BRCA2",
                "type": "Family",
                "aliStart": 1435,
                "start": "1432"
            },
            "aliStart": 1435,
            "clan": null,
            "start": 1432
        },
        {
            "modelStart": "3",
            "modelEnd": "34",
            "endStyle": "jagged",
            "end": 1566,
            "display": true,
            "startStyle": "jagged",
            "color": "#371e7a",
            "aliEnd": 1565,
            "modelLength": 35,
            "text": "BRCA2",
            "href": "http://pfam.xfam.org/family/PF00634.13",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "6.5e-15",
                "_uniq": 5,
                "description": "BRCA2 repeat",
                "bitscore": 42.9266929626465,
                "end": "1566",
                "accession": "PF00634.13",
                "database": "pfam",
                "aliEnd": 1565,
                "identifier": "BRCA2",
                "type": "Family",
                "aliStart": 1534,
                "start": "1532"
            },
            "aliStart": 1534,
            "clan": null,
            "start": 1532
        },
        {
            "modelStart": "1",
            "modelEnd": "34",
            "endStyle": "jagged",
            "end": 1710,
            "display": true,
            "startStyle": "curved",
            "color": "#371e7a",
            "aliEnd": 1710,
            "modelLength": 35,
            "text": "BRCA2",
            "href": "http://pfam.xfam.org/family/PF00634.13",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "9.4e-18",
                "_uniq": 6,
                "description": "BRCA2 repeat",
                "bitscore": 52.0054969787598,
                "end": "1710",
                "accession": "PF00634.13",
                "database": "pfam",
                "aliEnd": 1710,
                "identifier": "BRCA2",
                "type": "Family",
                "aliStart": 1677,
                "start": "1677"
            },
            "aliStart": 1677,
            "clan": null,
            "start": 1677
        },
        {
            "modelStart": "3",
            "modelEnd": "35",
            "endStyle": "curved",
            "end": 2043,
            "display": true,
            "startStyle": "jagged",
            "color": "#371e7a",
            "aliEnd": 2043,
            "modelLength": 35,
            "text": "BRCA2",
            "href": "http://pfam.xfam.org/family/PF00634.13",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "3.5e-16",
                "_uniq": 7,
                "description": "BRCA2 repeat",
                "bitscore": 47.0057029724121,
                "end": "2043",
                "accession": "PF00634.13",
                "database": "pfam",
                "aliEnd": 2043,
                "identifier": "BRCA2",
                "type": "Family",
                "aliStart": 2011,
                "start": "2010"
            },
            "aliStart": 2011,
            "clan": null,
            "start": 2010
        },
        {
            "modelStart": "2",
            "modelEnd": "34",
            "endStyle": "jagged",
            "end": 2112,
            "display": true,
            "startStyle": "jagged",
            "color": "#371e7a",
            "aliEnd": 2111,
            "modelLength": 35,
            "text": "BRCA2",
            "href": "http://pfam.xfam.org/family/PF00634.13",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "3.7e-16",
                "_uniq": 8,
                "description": "BRCA2 repeat",
                "bitscore": 46.8995971679688,
                "end": "2112",
                "accession": "PF00634.13",
                "database": "pfam",
                "aliEnd": 2111,
                "identifier": "BRCA2",
                "type": "Family",
                "aliStart": 2079,
                "start": "2078"
            },
            "aliStart": 2079,
            "clan": null,
            "start": 2078
        },
        {
            "modelStart": "1",
            "modelEnd": "143",
            "endStyle": "curved",
            "end": 3222,
            "display": true,
            "startStyle": "curved",
            "color": "#32adcc",
            "aliEnd": 3222,
            "modelLength": 143,
            "text": "BRCA-2_OB3",
            "href": "http://pfam.xfam.org/family/PF09104.5",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "9.9e-70",
                "_uniq": 9,
                "description": "BRCA2, oligonucleotide/oligosaccharide-binding, domain 3",
                "bitscore": 221.59977722168,
                "end": "3222",
                "accession": "PF09104.5",
                "database": "pfam",
                "aliEnd": 3222,
                "identifier": "BRCA-2_OB3",
                "type": "Domain",
                "aliStart": 3084,
                "start": "3084"
            },
            "aliStart": 3084,
            "clan": null,
            "start": 3084
        },
        {
            "modelStart": "1",
            "modelEnd": "117",
            "endStyle": "jagged",
            "end": 2832,
            "display": true,
            "startStyle": "curved",
            "color": "#cc8432",
            "aliEnd": 2831,
            "modelLength": 118,
            "text": "BRCA-2_OB1",
            "href": "http://pfam.xfam.org/family/PF09103.5",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "6.4e-45",
                "_uniq": 10,
                "description": "BRCA2, oligonucleotide/oligosaccharide-binding, domain 1",
                "bitscore": 140.40397644043,
                "end": "2832",
                "accession": "PF09103.5",
                "database": "pfam",
                "aliEnd": 2831,
                "identifier": "BRCA-2_OB1",
                "type": "Domain",
                "aliStart": 2702,
                "start": "2702"
            },
            "aliStart": 2702,
            "clan": null,
            "start": 2702
        },
        {
            "modelStart": "1",
            "modelEnd": "42",
            "endStyle": "curved",
            "end": 2904,
            "display": true,
            "startStyle": "curved",
            "color": "#333333",
            "aliEnd": 2904,
            "modelLength": 42,
            "text": "Tower",
            "href": "http://pfam.xfam.org/family/PF09121.5",
            "type": "pfama",
            "metadata": {
                "scoreName": "e-value",
                "score": "1.0e-25",
                "_uniq": 11,
                "description": "Tower",
                "bitscore": 78.1909103393555,
                "end": "2904",
                "accession": "PF09121.5",
                "database": "pfam",
                "aliEnd": 2904,
                "identifier": "Tower",
                "type": "Domain",
                "aliStart": 2863,
                "start": "2863"
            },
            "aliStart": 2863,
            "clan": null,
            "start": 2863
        }
    ],
    "arch": "76218951764462",
    "title": "Pfam",
    "markups": [],
    "motifs": []
};


	return hits_graphic;
};


hmmer_vis.hits_view = function() {
	"use strict";

	// this widget can display both hmmer hits
	// as well as domain architecture hits

	var chart, svg, axisScale, xAxis,yAxis,xAxisGroup,yAxisGroup;
	var margin = {top: 0, right: 20, bottom: 10, left: 85},
	width = 800 - margin.left - margin.right,
	height = 500 - margin.top - margin.bottom;
	var y = d3.scale.ordinal().rangeRoundBands([0, height], .3);
	var x = d3.scale.linear().rangeRound([0, width]);
	var conf = {
		'no_hits' : 10,
		'row_height' : 35,
		'query_offset' : 20,
		'width' : undefined,
		'height' : undefined,
		'query_line_offset' : 8.2,
		'hit_offset' : 9,
		'hit_height' : 4,
		'query_seq_height': 4,
		'longest_hit' : 0,
		'hit_legend_top' :6,
		'hit_legend_bottom' : 21,
		image_folder: "../../data/images/",

		// global svg settings
		'div_width' : 400
	};
	 // var color = d3.scale.category10();
	 var color = ['#990000','#f9ea6d','#009900','#000099','#aaaaaa'];
	 var add_header, best_pdb_hit;


 	var model_organisms = {
 		"Homo sapiens": conf.image_folder+"Homo-sapiens.svg",
 		"Mus musculus": conf.image_folder+"Mus-musculus.svg",
 		"Gallus gallus": conf.image_folder+"Gallus-gallus.svg",
 		"Drosophila melanogaster": conf.image_folder+"Drosophila-melanogaster.svg",
 		"Dictyostelium discoideum": conf.image_folder+"Dictyostelium-discoideum.svg",
 		"Danio rerio": conf.image_folder+"Danio-rerio.svg",
 		"Caenorhabditis elegans": conf.image_folder+"Caenorhabditis-elegans.svg",
 		"Arabidopsis thaliana": conf.image_folder+"Arabidopsis-thaliana.svg",
 		"Saccharomyces cerevisiae": conf.image_folder+"Saccharomyces-cerevisiae.svg",
 		"Schizosaccharomyces pombe": conf.image_folder+"Schizosaccharomyces-pombe.svg",
 		"Yersinia pestis": conf.image_folder+"Yersinia-pestis.svg",
 	};


	// The cbak returned
	var hits_view = function(div, found_hits,add_header,best_pdb_hit, query_architecture_id) {
		// to plot the colors correctly, we need to add a value to d.domains
		for (var index = 0; index < found_hits.length; ++index) {
			var current_hit = found_hits[index]
			var ndom = current_hit.ndom;
			var hits_colors = {};
			var unique_hit = 0;
			for (var domain_index = 0; domain_index < current_hit.domains.length; ++domain_index) {
				var current_domain = current_hit.domains[domain_index]
				current_domain.count = ndom-1;
				var changed = 0,overlap_detected=0;
				// set the colors
				//ok, if query overlaps with existing one --> no new color
				for (var uh in hits_colors) {
					var curr_from = current_domain.alihmmfrom, dict_to = hits_colors[uh]['to'], curr_to = current_domain.alihmmto, dict_from = hits_colors[uh]['from'];
					// hit overlaps completely
					if(curr_from <= dict_from){
						if(curr_to >= dict_from){
							overlap_detected=1;
						}
					}
					else{
						if(curr_from <= dict_to){
							overlap_detected=1;
						}
					}
				}
				if(overlap_detected){
					current_domain.query_color = color[unique_hit];
				}
				else{
					// add new color for unique hit
					current_domain.query_color = color[unique_hit++];
					var coordinates = {'from':current_domain.alihmmfrom, 'to': current_domain.alihmmto, 'color': current_domain.query_color};
					hits_colors[unique_hit] = coordinates; 				
				}
			}			
		}
		// number of hits
		conf.all_hits = found_hits;
		conf.no_hits = conf.all_hits ? conf.all_hits.length : 1;
		conf.height = conf.no_hits * conf.row_height;

		// determine longest hit
		conf.longest_hit = d3.max(found_hits, function(d,i) { return i>conf.no_hits ? 0:d.hit_pos.target.len; });
		conf.query_length = d3.max(found_hits, function(d,i) { return i>conf.no_hits ? 0:d.hit_pos.query.len; });
		conf.width = conf.longest_hit > conf.query_length ? conf.longest_hit : conf.query_length;

		console.log("longest seq is "+conf.width);
		axisScale = d3.scale.linear().domain([0, conf.width]).range([0, conf.div_width]);
		
		if(add_header){
		var ul = d3.select(div).append("ul").attr("class", "top_hits");

		// put the scale into an empty div
		// add an axis
		var header_li = ul.append("li")
				.append('div').attr('class', 'container-fluid')
				.append('div').attr('class', 'row');
		var left_header_div = header_li.append('div').attr('class', 'col-xs-4 col-md-2 col-lg-2 ')
		var middle_header_div = header_li.append('div').attr('class', 'col-xs-12 col-md-8 col-lg-8 middle_container')
		var right_header_div = header_li.append('div').attr('class', 'col-xs-4 col-md-2 col-lg-2')
	
		left_header_div
				.append("span")
				.attr("class", "hit_info").html(function(d){ return "<b>Gene name</b>"; });
		
		right_header_div.append("p").attr('class','score_info').append("span")
				.attr('class', 'hit_legend')
				.html(function(d){return "<b>Evalue</b><br><i>BitScore</i>"});
		
		// AXIS
		middle_header_div.append('svg').attr('height', 25).attr('width',conf.div_width-10)
				.append("g").attr("class","axis").attr("transform","translate(3,20)")
		.call(d3.svg.axis()
        .scale(axisScale)
        .orient("top"));
		}

		var hits_ul = d3.select(div).append("ul").attr("class", "top_hits");

		var li = hits_ul.selectAll("li")
        .data(conf.all_hits)
        .enter()
        .append("li")
				.append('div').attr('class', 'container-fluid')
				.append('div').attr('class', 'row');
				
// define the three columns
		var left_blocks = li.append('div').attr('class', 'col-xs-4 col-md-2 col-lg-2 hit_info');

		// left_blocks.append("div")
		// 		.attr("class", "species_info").html(function(d,i){
		// 			return "<b>"+(i+1)+".</b>";
		// 		});
		// add a table here
		var left_table = left_blocks.append('table')
		// tr for: number and accession
		var first_row = left_table.append('tr');
		var second_row = left_table.append('tr');
		//counter
		// tr for: number and accession
		first_row.append('td')
				  .attr("class",function(d){return " "+d.kg; })
		
		var second_colum = first_row.append('td')
		// second_colum.append('span').attr('class','table_hit').html(function(d,i){return "<b>"+(i+1)+"</b>"})
		second_colum.append('text').html(function(d,i){return "<b>"+d.name+"</b>"})
			  	 // .attr('class','class="col-md-2"')
				  // .attr("colspan", "2")
				  .html(function(d,i){
				  					 return "<b>"+d.name+"</b>";
				 // 					 // return "<b>"+(i+1)+". "+d.name+"</b>";
				  })
		//model orga
		second_row.append('td')
			    .append('svg').attr('height', 15).attr('width',15)
				.append("svg:image")
	   			.attr("xlink:href", function(d){
						if(d.species in model_organisms){
								return model_organisms[d.species];
						}
							
				})
						.attr("width", 15)
						.attr("class","sunburst_model_organism")
						.attr("height", 15);
		// .html(function(d){ return d.species; })
		// domain architecture
						// <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
		second_row.append('td')
				  .append('span')
				  .style("font-size","1.5em")
				  // .attr('aria-hidden','true')
				  .attr('class',function(d){
							return d.archindex == query_architecture_id? 'glyphicon glyphicon-ok-circle' : ''
				  })
				  .html(function(d){ return d.hasOwnProperty("is_best_pdb_hit")? " PDB" : ''; })
						// .html(function(d){
			// var return_value = query_architecture_id? "EXACT" : '     ';
			// return_value += d.hasOwnProperty("is_best_pdb_hit")? "PDB" : '     ';
			// return query_architecture_id? "same<br>DomArch" : ''})
		// PDB
		// second_row.append('td').html(function(d){ return d.hasOwnProperty("is_best_pdb_hit")? "PDB<br>hit" : ''; })
		// var left_block_svg = left_blocks.append('div').append('svg')
// 		.attr('height', function(d){
// 			return d.hasOwnProperty("is_best_pdb_hit") ? 15 : 0;
// 		}).attr('width',45).append('g')
// 		// .attr("transform","translate(3,20)")
//
// 		left_block_svg.append("rect")
// 	// y.rangeBand())
// 		.attr("class", "pdb_bar")
// 		.attr("x", 0)
// 		// .attr('y', function(d,i, j){ return (best_pdb_hit)*conf.row_height + conf.hit_offset + 15; })
// 		.attr("width", 45)
// 		.attr("height", 15)
// 		.attr('r', 0)
// 		.attr('ry', 0)
// 		.attr('rx', 0)
// 		.style('fill', 'red')
// 		.style('fill-opacity', 0.4)
//         .attr('stroke', 'black')
//
// 		// append pdb text
// 		left_block_svg.append("text")
// 		.attr("class", "hit_description small")
// 		 .attr('y', 10)
// 		.attr('x',5)
// 		.text("PDB hit");
//
// 		left_blocks.append("span")
// 		.attr("class", "species_info").html(function(d,i){
// 			return "<b>"+(i+1)+".</b>";
// 		});
//
// 		// left_blocks.append("span")
// 		// .attr("class", "hit_count").html(function(d,i){ return "Hit: "+parseInt(i+1); });
// 		left_blocks
// 		.append("div")
// 		.attr("class",function(d){
// 			return "hit_list "+d.kg;
// 		})
// 		.append("span")
// 		.attr("class", "hit_list_kg")
// 		.html(function(d){
// 				// var element<li class='bact'><span>Bacteria</span></li>\
//
// 			// var gene_name = "<span class="++"></span><b>"+d.name+"</b>";
// 			return "<b>"+d.name+"</b>";
// 		});
//

		

		//left_blocks.append("span")
		//.attr("class", "species_info").html(function(d){ 
		//	var full_species = d.species;
			
		//	return "<i>"+(d.species).substring(0,30)+"</i>"; });

// middle
		var middle_div = li.append('div').attr('class', 'col-xs-12 col-md-8 col-lg-8 middle_container')

// right
		 var rigth_blocks_div = li.append('div').attr('class', 'col-xs-4 col-md-2 col-lg-2  score_info')
	// 	// E-value
				rigth_blocks_div
				.append("span")
				.attr("class", "score_info").html(function(d){ return "<b>"+d.evalue+"</b><br>"; });

				rigth_blocks_div.append("span")
				.attr("class", "score_info").html(function(d){ return "<i>"+d.score+"</i>"; });



		// middle svg
		var middle_svg = middle_div.append("div").attr('class','middle_div')
				.append('svg')
				.attr('height', 40).attr('width',conf.div_width-10).append('g').attr("transform", "translate(0,5)");

				
		// the domains
		var query_seq_matches_svg = middle_svg
		.append("g")
		set_colors(query_seq_matches_svg);

		query_seq_matches_svg.append("rect")
		// y.rangeBand())
		.attr("class", "hit_bar")
		.attr("x", 0)
		// .attr('y', function(d,i, j){ return (i)*conf.row_height + conf.hit_offset + 15; })
		.attr("width", function(d) { return axisScale(d.hit_pos.query.len); })
		.attr("height", 4.5)
		.attr('r', 0)
		.attr('ry', 0)
		.attr('rx', 0)
		.attr('stroke','none')
		.attr('opacity',1)
		.attr('fill-opacity',1)
		.style("fill", function(d) { return "url(#line_gradient)"; })
		


		// the target seq
		var target_matches_svg = middle_svg
		.append('g').attr('class','');
		set_colors(target_matches_svg);

		var target_area = target_matches_svg.append('g').attr("transform", "translate(0,10)")
		
		target_area.append("rect")
		// y.rangeBand())
		.attr("class", "hit_bar")
		.attr("x", 0)
		.attr("y", 5)
		// .attr('y', function(d,i, j){ return (i)*conf.row_height + conf.hit_offset + 15; })
		.attr("width", function(d) { return axisScale(d.hit_pos.target.len); })
		.attr("height", 4.5)
		.attr('r', 0)
		.attr('ry', 0)
		.attr('rx', 0)
		.attr('stroke','none')
		.attr('opacity',1)
		.attr('fill-opacity',1)
		.style("fill", function(d) { return "url(#line_gradient)"; })
//
		// add description
		target_area.append("text")
		.attr("class", "hit_description small")
		// .attr("x", function(d,i) { return axisScale(d.hit_pos.target.len)+2; })
		 .attr('y', 22)
		// function(d,i, j){
		// 	return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_bottom;
		// })
		.text(function(d){return d.desc});


		


		var target_matches = target_matches_svg.append("g").attr("transform", "translate(0,4)").selectAll("g")
		.data(function(d) { return d.domains })
		.enter();



		target_matches.append('path')
	    .attr('d', function(d,i){
	      return draw_domain_hit(d,axisScale);
	    })
	     .attr('opacity', function(d){return d.oasc;})
		.attr('stroke', '#000')
		.attr('stroke-dasharray',"2,2")
	     .attr('fill', 'none')

		// now draw domain matches
		target_matches.append('rect')
		.attr("width", function(d) { return axisScale(d.jenv-d.ienv); })
		.attr("height", 4.5)
		.attr("x",function(d){return axisScale(d.ienv)})
		.attr("y",11)
		.attr('r', 0)
				.attr('ry', 0)
				.attr('rx', 0)
				.attr('stroke','none')
				.attr('opacity',1)
				.attr('fill-opacity',1)
				.style("fill", function(d) {
					// var test= d.count;
					return d.query_color });
					
			target_matches.append('rect')
			.attr("width", function(d) { return axisScale(d.alihmmto-d.alihmmfrom); })
			.attr("height", 4.5)
			.attr("x",function(d){return axisScale(d.alihmmfrom)})
			.attr("y",-4)
			.attr('r', 0)
					.attr('ry', 0)
					.attr('rx', 0)
					.attr('stroke','none')
					.attr('opacity',1)
					.attr('fill-opacity',1)
					.style("fill", function(d) {
						// var test= d.count;
						return d.query_color }); 			
// 		// y.rangeBand())
// 		.attr("class", "hit_match")
// 		.attr("x", function(d){ return  axisScale(d.ienv)})
// 		// .attr('y', function(d,i, j){ return (i)*conf.row_height + conf.hit_offset + 15; })
// 		.attr("width", function(d) { return axisScale(d.jenv-d.ienv); })
// 		.attr("height", 4.5)
// 		.attr('r', 0)
// 		.attr('ry', 0)
// 		.attr('rx', 0)
// 		.attr('stroke','none')
// 		.attr('opacity',1)
// 		.attr('fill-opacity',1)
// 		.style("fill", function(d) {
// 			var test= d.count;
// 			return color[d.count] });
		d3.selectAll(".axis path")
		.style("fill", "none")
		.style("stroke", "#000")
		.style("shape-rendering", "crispEdges")

		d3.selectAll(".axis line")
		.style("fill", "none")
		.style("stroke", "#000")
		.style("shape-rendering", "crispEdges")


		return hits_view;
	};



	var add_annotation_line	 = function(d){
		var curr_data = d;
		if(d.regions){
			d3.select(this).selectAll(".annotation_text").data(d.regions).enter()
			//.append("rect")
			.append("text")
			.attr("x", function(d) { return 35; })
			.attr("y", function(d) { return 4; })
		}
	};
	// hmmer_vis.dispatch.on('update', function(args){
	// 	    //do something here
	// 		console.log("I was told to  "+args.message);
	// 		// pie_chart.redraw(args.count);
	//})


	hits_view.redraw = function(new_data) {
		// update axis
		// we don't really need that as the query doesnt change
		var y_domain = ["Query"];
		for (var i = 1; i <= new_data.length; i++) {
			y_domain.push("Hit "+i)
		}
		// y_domain.push([example_data.map(function(d,i){ return "Hit "+(i+1); })])
		y.domain(y_domain);

		// y.domain(example_data.map(function(d,i){ return "Hit "+(i+1); }));
		// console.log(conf.row_height * example_data.length);
		y.rangeRoundBands([0,conf.row_height * new_data.length])

		d3.select("#y_axis").call(yAxis);



		var vakken = svg.selectAll(".bar").data(new_data, keyFunction);
		vakken.transition().duration(2000);

		var vakken_enter = vakken
		.enter().append("g")
		.attr("class", "bar")
		// .attr("transform", function(d) { return "translate(0," + y(d.Question) + ")"; });

		var bars = vakken_enter.selectAll("rect")
		.data(function(d) { return d.regions; });

		bars.transition(function(d){console.log("transitioning ")}).duration(2000).attr("x", 0).style("fill", "yellow");

		var bars_enter = bars.enter().append("g").attr("class", "subbar");

		bars_enter.append("rect")
		.attr("height", conf.hit_height)
		// y.rangeBand())
		.attr("x", function(d) { return axisScale(d.aliStart); })
		.attr('y', function(d,i, j){
			// console.log(d.name+" y = "+(j+1)*20+" i: "+i+ " j: "+j)
			return (i+1)*conf.row_height + conf.hit_offset;
			// return (i)*conf.row_height  + conf.hit_offset;
			// return (i)*conf.row_height + 5;
		})
		.attr("width", function(d) { return axisScale(d.aliEnd - d.aliStart); })
		.style("fill", function(d) { return "green";//color(d.name);
	});



	// bars.append("text")
	// .attr("x", function(d) { return -20; })
	// .attr("y", function(d, i){ return (i+1)*20})
	// .attr("dy", "0.5em")
	// .attr("dx", "0.5em")
	// .style("font" ,"10px sans-serif")
	// .style("text-anchor", "begin")
	// .text(function(d, i) { return "Hit "+i });


	vakken.exit(function(d){
		console.log("removing d: "+d.name);

	}).remove();
	bars.exit().remove();

	return hits_view;
}
//Generate some nice data.
function _exampleData() {
	var test_array = [];
	for (var letter in {'present':0,'complete':0, 'incomplete':0}) {
		test_array.push({'label':letter, 'value': Math.random()*30})
	}
	return test_array;
}


var keyFunction = function(d) {
	// console.log("key is "+d.name);
	return d.name;
};


function set_colors(svg){
	var gradient = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "line_gradient")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "1.8369701987210297e-16").attr("y1", "0").attr("x2", "0").attr("y2", "1").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
	gradient.append("svg:stop").attr('offset', '0%').attr('stop-color',"#999999").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient.append("svg:stop").attr('offset', '40%').attr('stop-color',"#eeeeee").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient.append("svg:stop").attr('offset', '60%').attr('stop-color',"#cccccc").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient.append("svg:stop").attr('offset', '100%').attr('stop-color',"#999999").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")

	var gradient2 = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "domain_gradient")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "0").attr("y1", "1").attr("x2", "6.123233995736766e-17").attr("y2", "0").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
	gradient2.append("svg:stop").attr('offset', '0%').attr('stop-color',"#ffffff").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient2.append("svg:stop").attr('offset', '50%').attr('stop-color',"#a3287a").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient2.append("svg:stop").attr('offset', '70%').attr('stop-color',"#a3287a").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient2.append("svg:stop").attr('offset', '100%').attr('stop-color',"#ffffff").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")







	var gradient3 = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "domain_gradient2")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "0").attr("y1", "1").attr("x2", "6.12").attr("y2", "0").attr("gradientTransform", "matrix(1,0,0,1,0,0)");

	gradient3.append("svg:stop").attr('offset', '0%').attr('stop-color',"#0099CC").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient3.append("svg:stop").attr('offset', '50%').attr('stop-color',"#7a1e74").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient3.append("svg:stop").attr('offset', '70%').attr('stop-color',"#7a1e74").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	gradient3.append("svg:stop").attr('offset', '100%').attr('stop-color',"#0099CC").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")

	var gradient4 = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "domain_gradient3")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "0").attr("y1", "1").attr("x2", "6.12").attr("y2", "0").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
	gradient4.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "0%").attr("stop-color", "#CCF2CC");
	gradient4.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "50%").attr("stop-color", "#7a1e74");
	gradient4.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "60%").attr("stop-color", "#7a1e74");
	gradient4.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "100%").attr("stop-color", "#ffffff");

	var gradient5 = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "domain_gradient4")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "0").attr("y1", "1").attr("x2", "6.12").attr("y2", "0").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
	gradient5.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "0%").attr("stop-color", "#14101f");
	gradient5.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "50%").attr("stop-color", "#7a1e74");
	gradient5.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "60%").attr("stop-color", "#7a1e74");
	gradient5.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "100%").attr("stop-color", "#ffffff");

	var gradient6 = svg.append("svg:defs").append("svg:linearGradient")
	.attr("id", "domain_gradient5")
	.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "0").attr("y1", "1").attr("x2", "6.12").attr("y2", "0").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
	gradient6.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "0%").attr("stop-color", "#623e32");
	gradient6.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "50%").attr("stop-color", "#7a1e74");
	gradient6.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "60%").attr("stop-color", "#7a1e74");
	gradient6.append("svg:stop").attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("offset", "100%").attr("stop-color", "#ffffff");

}


function draw_domain_hit (d,axisScale){
  var offset = 5.5;


  // var start = "M"+axisScale(d.alihmmfrom)+",0"
  // var start_end = "L"+axisScale(d.alihmmto)+",0";
  // var down_end = "L"+axisScale(d.jenv)+","+2*offset;
  // var down_start = "L"+axisScale(d.ienv)+","+2*offset;
  // var up_start = "L"+axisScale(d.alihmmfrom)+",0";


  var start = "M"+axisScale(d.alihmmfrom)+",0"
  var start_end = "M"+axisScale(d.alihmmto)+",0";
  var down_end = "L"+axisScale(d.jenv)+","+2*offset;
  var down_start = "M"+axisScale(d.ienv)+","+2*offset;
  var up_start = "L"+axisScale(d.alihmmfrom)+",0";



  var full_path = start+""+start_end+""+down_end+""+down_start+""+up_start;
  // var path = "M"+i*1",

  return full_path;

}

function draw_domain (length, height, type){

	var offset = 10;
	var start = "M0,0";
	var line_to_end = "L"+length+",0";
	var end_down = "L"+length+","+height;
	var line_to_start = "L0,"+height;
	var start_up = "L0,0";


	var full_path = start+""+line_to_end+""+end_down+""+line_to_start+""+start_up;
	// var path = "M"+i*1",

	return full_path;

}

return hits_view;
};


hmmer_vis.lineage_plot = function() {
  "use strict";
  var chart;
  var svg;
  var curr = {};
  // The cbak returned
  var lineage_plot = function(div) {
    var test_texts = ["all"];

    // svg = d3.select(div).append('svg').selectAll("g").data(test_texts, function(d){return d;});
    // var lineage_paths = svg.enter().append("svg:g").attr("class", "lineage_group")
    // .attr("transform", "translate(10,10)");


    svg = d3.select(div).append('svg').attr("transform", "translate(20,20)");
    curr.lineage_paths = svg.selectAll("path").data(test_texts, function(d){
        console.log("indexing by d= "+d)
      return d;});
    var lineage_paths_enter = curr.lineage_paths.enter();


    lineage_paths_enter.append('path')
    .attr('d', function(e,i){
      return draw_lineage_line(i);
    })
    .attr('stroke', '#000')
    .attr('fill', 'none')
    .attr("transform", "translate(20,20)")
    // .attr({
    //   d: 'M20,0L0,0L0,20,L40,20',
    //   stroke: '#000',
    //   fill:'none'
    // })


    var texts = lineage_paths_enter
    .append("text")
    .attr("x", function(d,i) { return (i+1)*12; })
    .attr("y", function(d,i) { return i*12 + 4; })
    .text( function (d) { return d; })
    .attr("font-family", "sans-serif")
    .attr("font-size", "10px")
    .attr("fill", "red")
    .attr("transform", "translate(20,20)");


    // chart =

    return lineage_plot;
  };


  hmmer_vis.dispatch.on('update', function(args){
    //do something here
    console.log("I was told to  "+args.message);
    pie_chart.redraw(args.count);
  })


  lineage_plot.redraw = function(new_data) {

    var new_lineages = svg.selectAll("path").data(new_data);
    var new_texts = svg.selectAll("text").data(new_data);
    new_lineages.transition()
    .duration(750).ease("cubic-in-out")
    .attr('d', function(e,i){
      return draw_lineage_line(i);
    })
    .attr("transform", "translate(20,20)")


    var new_lin = new_lineages.enter().append("path")
    .attr('d', function(e,i){
      console.log("entering appending "+e);
      return draw_lineage_line(i);
    })
    .attr('stroke', '#000')
    .attr('fill', 'none')
    .attr("transform", "translate(20,20)");

    var new_text = new_texts.enter()
    .append("text")
    .attr("x", function(d,i) { return (i+1)*12; })
    .attr("y", function(d,i) { return i*12 + 4; })
    .text( function (d) { return d; })
    .attr("font-family", "sans-serif")
    .attr("font-size", "10px")
    .attr("fill", "red")
    .attr("transform", "translate(20,20)");

    new_texts.exit().remove();

    new_lineages.exit(function(d){
      console.log("removing "+d);
    }).remove(function(d){
      console.log("removing "+d);
    });

    return lineage_plot;
  }



  hmmer_vis.dispatch.on('update_lineage_plot', function(args){
    // 	    //do something here
    var arr = [];
    if (typeof args !== 'undefined' && typeof args.sequenceArray !== 'undefined'){
      console.log("found some in update_tree_legend "+args.sequenceArray);
      for (var i = 0; i < args.sequenceArray.length; i++){
        var level = args.sequenceArray[i];
        arr.push(level.short+" ("+level.hit_number+")");
      };
      // var new_object = [{'key': "all", "values":arr}];
      lineage_plot.redraw(arr);
    }
  })

  function draw_lineage_line (i){
    var offset = 10;
    var start = "M"+(i+1)*offset+","+i*offset;
    var start_back = "L"+i*offset+","+i*offset;
    var back_down = "L"+i*offset+","+(i+1)*offset;
    var down_right = "L"+(i+2)*offset+","+(i+1)*offset;

    var full_path = start+""+start_back+""+back_down+""+down_right;
    // var path = "M"+i*1",

    return full_path;

  }


  lineage_plot.start_timer = function(){
    setInterval(function () {
      console.log("updating");
      lineage_plot.redraw(['all','Metazoa','Vertebrates','Homo sapiens', 'Pan troglodytes']);
    }, 1500);
  }

  return lineage_plot;
};


hmmer_vis.pdb_viewer = function() {
	"use strict";
	var chart;
 var show_pdb_entry = 1;							
 var options = {
   width: 400,
   height: 400,
   antialias: true,
   quality : 'medium'
 };
 var curr = {
	 'chain': undefined,
	 'pdb_id': undefined,
	 'div' : undefined,
 }
	// The cbak returned
	var pdb_viewer = function(div, pdb_id, chain,hit_positions) {
		 // insert the viewer under the Dom element with id 'gl'.
		 curr.viewer = pv.Viewer(div, options);
		 curr.width = d3.select("#pdb_div").style("width") 
		 curr.height = d3.select("#pdb_div").style("height") 
		 curr.chain = chain;
	 	curr.pdb_id = pdb_id;
		curr.div = div;	
	 // if(!show_pdb_entry){
		 // 		 div.innerHTML = "Sorry no pdb with overlapping matching region found.";
		 // 	 }
	 pdb_viewer.redraw(hit_positions);
		
		return chart;
	};
	
	
    pdb_viewer.redraw = function(hit_positions) {
		var pdb_entry = curr.pdb_id;
	   	var pdb_url = "http://www.ebi.ac.uk/pdbe/entry-files/download/pdb"+pdb_entry+".ent"
		var not_selected_chains = [];
		console.log("would get to fetch data from: "+pdb_url);
 	   	pv.io.fetchPdb(pdb_url, function(structure) {
 				// var structure = pv.io.pdb(data);
 				var chains = structure.chains().map(function(d){
 					var chain = d['_H'];
 					var current_chain = structure.select({chain: chain});
 					if(curr.chain == chain){
 						var current_viewer = curr.viewer.cartoon('current_chain', current_chain);
 						// var selected = structure.select({rnumRange : [1001,1286]});
						hit_positions.map(function(range){
 							// var selected = structure.select({rnumRange : range});
							var coordinates = [range.start,range.end];
 							// var selected = structure.select({rnumRange : coordinates});
	 						// var selected = structure.select({rnumRange : [1,286]});
							var selected = structure.select({rnumRange : coordinates});
 							current_viewer.colorBy(color.uniform('red'), selected);
 						})
 					}
 					else{
 						not_selected_chains.push(chain);
 						curr.viewer.cartoon('other_chain', current_chain);
 						curr.viewer.cartoon('other_chain', current_chain);
 						curr.viewer.forEach(function(object) {
 							if(object['_H'] == 'other_chain'){
 								object.setOpacity(0.4);
 							}
 						});
 					}
 					return d['_H'];
 				})
 	     	   //viewer.centerOn(structure);
 			   curr.viewer.autoZoom()
 			   var html_text = "Pdb structure of the best hit was <a href='http://www.ebi.ac.uk/pdbe/entry/pdb/"+pdb_entry+"'>"+pdb_entry+"</a> (chain: "+curr.chain+").";
 			   html_text += (not_selected_chains.length)? "<br>The other "+not_selected_chains.length+" chain(s) ("+not_selected_chains.sort()+") are greyed out. " : "<br>The protein has no other chains. ";
 			   html_text += "The matching region on chain "+curr.chain+" is highlighted in red.";
 			   d3.select("#pdb_text").html(html_text);
			   
 	   });
      return pdb_viewer;
    };
	
	function highlightFrom(start, stop) {
	  return new pv.color.ColorOp(function(atom, out, index) {
	    if (atom.index() > start && atom.index() < stop ) {
	      out[index+0] = 1.0; // R
	      out[index+1] = 0.0; // G
	      out[index+2] = 0.0; // B
	      out[index+3] = 1.0; // A
	    } else {
	      out[index+0] = 1.0;
	      out[index+1] = 1.0;
	      out[index+2] = 1.0;
	      out[index+3] = 0;
	    }
	  });
	}


	hmmer_vis.dispatch.on('update_pdb_viewer', function(args){
  // 	    //do something here
		if (typeof args !== 'undefined'){
			if(curr.pdb_id == args.pdb_id){
				if(curr.chain == args.chain){
					d3.select("#pdb_update_text").html("same pdb_id and chain, nothing updated");
				}
				else{
					d3.select("#pdb_update_text").html("same pdb_id, updating chain from "+curr.chain+" to "+args.chain+" ");
				}
			}
			else{
				d3.select("#pdb_update_text").html("different pdb_id, fetching new pdb entry");
				d3.select("#pdb_div").selectAll("*").remove();
				d3.select("#pdb_spinner").style("visibility",'');
				// clear old
				curr.pdb_id = args.pdb_id;
				curr.chain = args.chain;
				// var hit_positions = args.mapping.pdb;
				if(! Object.prototype.toString.call( args.pdb_region ) === '[object Array]' ) {
					args.pdb_region = [args.pdb_region];
				}
				pdb_viewer.redraw(args.pdb_region);
				curr.viewer = pv.Viewer(curr.div, options);
				d3.select("#pdb_spinner").style("visibility",'hidden');
			}
		}
		else{
			d3.select("#pdb_update_text").html("Something went wrong, cannot update");
		}
  
	 return pdb_viewer;
});
	 return pdb_viewer;
};


hmmer_vis.pie_chart = function() {
	"use strict";
	var chart;
	
	// The cbak returned
	var pie_chart = function(div) {
	chart = nv.models.pieChart()
        .x(function(d) { return d.label })
        .y(function(d) { return d.value })
		// .donut(true)
		// .growOnHover(true)
		.noData("There is no Data to display")
        .showLegend(false)
		;
		
	 chart.color(["green","grey","yellow"])
      d3.select("#pie_chart svg")
          .datum(_exampleData())
          .transition().duration(350)
          .call(chart);

    return pie_chart;
	};


	hmmer_vis.dispatch.on('update', function(args){
	    //do something here
		console.log("I was told to  "+args.message);
		pie_chart.redraw(args.count);
	})
	

    pie_chart.redraw = function(pie_data) {
		var new_data = [], i = 0;
		if(pie_data !== undefined){
			for (var letter in {'present':0,'complete':0, 'incomplete':0}) {
				new_data.push({'label':letter, 'value': pie_data[i++]})
			}
		}
		else{
			new_data = _exampleData();
		}
		// console.log("redraw called");
         d3.select('#pie_chart svg')
			// chart
            .datum(new_data)
            .transition().duration(500)
			.call(chart);
			// pie_chart.update();
			return pie_chart;	
    }
	//Generate some nice data.
	function _exampleData() {
		var test_array = [];
	 	for (var letter in {'present':0,'complete':0, 'incomplete':0}) {
		   test_array.push({'label':letter, 'value': Math.random()*30})
	 	}
		return test_array;
	}
   
	function stream_layers(n, m, o) {
	  if (arguments.length < 3) o = 0;
	  function bump(a) {
	    var x = 1 / (.1 + Math.random()),
	        y = 2 * Math.random() - .5,
	        z = 10 / (.1 + Math.random());
	    for (var i = 0; i < m; i++) {
	      var w = (i / m - y) * z;
	      a[i] += x * Math.exp(-w * w);
	    }
	  }
	  return d3.range(n).map(function() {
	      var a = [], i;
	      for (i = 0; i < m; i++) a[i] = o + o * Math.random();
	      for (i = 0; i < 5; i++) bump(a);
	      return a.map(stream_index);
	    });
	}

	/* Another layer generator using gamma distributions. */
	function stream_waves(n, m) {
	  return d3.range(n).map(function(i) {
	    return d3.range(m).map(function(j) {
	        var x = 20 * j / m - i / 3;
	        return 2 * x * Math.exp(-.5 * x);
	      }).map(stream_index);
	    });
	}

	function stream_index(d, i) {
	  return {x: i, y: Math.max(0, d)};
	}

	pie_chart.start_timer = function(){
		setInterval(function () {
	          pie_chart.redraw([2,6,100]);
	     }, 1500);
	}

	return pie_chart;
};


hmmer_vis.seq_match = function() {
	"use strict";
	var data_table_chart;
	var conf = {
		'no_hits_threshold': 100,
		'pagination_number': 10,
		'div_width': 400,
		'axisScale':'',
		'height' : 84,
		'track_heigth': 15,
		'track_text_offset':29
	};
	var curr = {
		'no_all_rows' : 0,
		'data' : undefined,
		'all_data' : undefined,
		'columns' : undefined,
	};
	var plot_pdb_matches = 1;
	// The cbak returned
	var seq_match = function(div,data_entry) {
		// conf.div_width = d3.select(div).attr('width');
		curr.data = data_entry;
		conf.longest_hit = d3.max([data_entry], function(d,i) { return d.hit_pos.target.len; });
		conf.query_length = d3.max([data_entry], function(d,i) { return d.hit_pos.query.len; });
		conf.width = conf.longest_hit > conf.query_length ? conf.longest_hit : conf.query_length;
		conf.axisScale = d3.scale.linear().domain([0, conf.width]).range([0, conf.div_width]);
		
			var middle_svg = d3.select(div).selectAll('div').data([data_entry])
					.enter().append('div').attr('class','middle_div')
					.append('svg')
					.attr('height', conf.height).attr('width',conf.div_width-10).append('g').attr("transform", "translate(0,5)");

				
		// the domains
		var query_seq_matches_svg = middle_svg
				.append("g")
		set_colors(query_seq_matches_svg);

		query_seq_matches_svg.append("rect")
		// y.rangeBand())
		.attr("class", "hit_bar")
		.attr("x", 0)
		// .attr('y', function(d,i, j){ return (i)*conf.row_height + conf.hit_offset + 15; })
		.attr("width", function(d) { 
			var test;
			return conf.axisScale(d.hit_pos.query.len); })
		.attr("height", 4.5)
		.attr('r', 0)
		.attr('ry', 0)
		.attr('rx', 0)
		.attr('stroke','none')
		.attr('opacity',1)
		.attr('fill-opacity',1)
		.style("fill", function(d) { return "url(#line_gradient)"; })
		


		// the target seq
		var target_matches_svg = middle_svg
		.append('g').attr('class','');
		set_colors(target_matches_svg);

		var target_area = target_matches_svg.append('g').attr("transform", "translate(0,10)")
		
		target_area.append("rect")
		// y.rangeBand())
		.attr("class", "hit_bar")
		.attr("x", 0)
		.attr("y", 5)
		// .attr('y', function(d,i, j){ return (i)*conf.row_height + conf.hit_offset + 15; })
		.attr("width", function(d) { return conf.axisScale(d.hit_pos.target.len); })
		.attr("height", 4.5)
		.attr('r', 0)
		.attr('ry', 0)
		.attr('rx', 0)
		.attr('stroke','none')
		.attr('opacity',1)
		.attr('fill-opacity',1)
		.style("fill", function(d) { return "url(#line_gradient)"; })
//
		// add description
		if(!plot_pdb_matches){
		target_area.append("text")
		.attr("class", "hit_description small")
		// .attr("x", function(d,i) { return axisScale(d.hit_pos.target.len)+2; })
		 .attr('y', 22)
		// function(d,i, j){
		// 	return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_bottom;
		// })
		.text(function(d){return d.desc});
		}

		


		var target_matches = target_matches_svg.append("g").attr("transform", "translate(0,4)").selectAll("g")
		.data(function(d) { return d.domains })
		.enter();



		target_matches.append('path')
	    .attr('d', function(d,i){
	      return draw_domain_hit(d,conf.axisScale);
	    })
	     .attr('opacity', function(d){return d.oasc;})
		.attr('stroke', '#000')
		.attr('stroke-dasharray',"2,2")
	     .attr('fill', 'none')

		// now draw domain matches
		target_matches.append('rect')
		.attr("width", function(d) { return conf.axisScale(d.jenv-d.ienv); })
		.attr("height", 4.5)
		.attr("x",function(d){return conf.axisScale(d.ienv)})
		.attr("y",11)
		.attr('r', 0)
				.attr('ry', 0)
				.attr('rx', 0)
				.attr('stroke','none')
				.attr('opacity',1)
				.attr('fill-opacity',1)
				.style("fill", function(d) {
					// var test= d.count;
					return d.query_color?d.query_color : 'red' });
					
			target_matches.append('rect')
			.attr("width", function(d) { return conf.axisScale(d.alihmmto-d.alihmmfrom); })
			.attr("height", 4.5)
			.attr("x",function(d){return conf.axisScale(d.alihmmfrom)})
			.attr("y",-4)
			.attr('r', 0)
					.attr('ry', 0)
					.attr('rx', 0)
					.attr('stroke','none')
					.attr('opacity',1)
					.attr('fill-opacity',1)
					.style("fill", function(d) {
						// var test= d.count;
						return d.query_color?d.query_color : 'red' }); 	



			if(plot_pdb_matches){
							var pdb_matches = target_matches_svg.append("g").attr("transform", "translate(0,12)").selectAll("g")
							.data(function(d) { return d.pdb_matches })
							.enter();

							// pdb_matches.append('path')
// 						    .attr('d', function(d,i){
// 						      return draw_domain_hit(d,conf.axisScale);
// 						    })
// 						     .attr('opacity', function(d){return d.oasc;})
// 							.attr('stroke', '#000')
// 							.attr('stroke-dasharray',"2,2")
// 						     .attr('fill', 'none')

							// now draw domain matches
							pdb_matches.append('rect')
							.attr("width", function(d) { 
								var test;
								return (!d.hide)?conf.axisScale(d.mapping.uniprot.end-d.mapping.uniprot.start) :0; 
							})
							.attr("height", 4.5)
							.attr("x",function(d){return conf.axisScale(d.mapping.uniprot.start)})
								.attr("y",function(d){return conf.track_heigth* (d.plot_level? d.plot_level+1:1)})
							.attr('r', 0)
									.attr('ry', 0)
									.attr('rx', 0)
									.attr('stroke','none')
									.attr('opacity',1)
									.attr('fill-opacity',1)
									.style("fill", function(d) {
										// var test= d.count;
										return d.query_color?d.query_color : 'blue' });
					
							pdb_matches.append("svg:a")
										.on("click", function(d){ 
												return update_pdb_viewer(d)
											})
										.append("text")
										.attr("class", "pdb_hit_description small")
										.attr("x",function(d){return conf.axisScale(d.mapping.uniprot.start)})
										// .attr("x", function(d,i) { return axisScale(d.hit_pos.target.len)+2; })
										 //.attr('y', 25)
										.attr("y",function(d){return conf.track_text_offset + conf.track_heigth* (d.plot_level? d.plot_level:0)})
										// function(d,i, j){
										// 	return (i)*conf.row_height + conf.hit_offset+conf.hit_legend_bottom;
										// })
										.text(function(d){return  (!d.hide)? d.id+"_"+d.chain:''});
								// pdb_matches.append('rect')
// 								.attr("width", function(d) { return conf.axisScale(d.alihmmto-d.alihmmfrom); })
// 								.attr("height", 4.5)
// 								.attr("x",function(d){return conf.axisScale(d.alihmmfrom)})
// 								.attr("y",-4)
// 								.attr('r', 0)
// 										.attr('ry', 0)
// 										.attr('rx', 0)
// 										.attr('stroke','none')
// 										.attr('opacity',1)
// 										.attr('fill-opacity',1)
// 										.style("fill", function(d) {
// 											// var test= d.count;
// 											return d.query_color?d.query_color : 'red' });
							
						}

		return seq_match;
	};


	seq_match.append_divs = function(){
		return function (row, data,dataIndex) {
			var parent_id = "no_"+dataIndex+"parent";
			var div = document.createElement("div");
			div.setAttribute("id", parent_id);
			$(row).children("td:last-child").html('');
			$(row).children("td:last-child").append(div);
		}
	}


	seq_match.plot_domains = function(data,search_term){
		var rows = data_table_chart.fnGetNodes();
		for(var i=0;i<conf.pagination_number;i++){
			// can only plot the first x domains, where x is the number of entries per pagination page.
			// this is because datatables plots the 2nd, 3rd page only on demand
			// for(var i=0;i<rows.length;i++){
			//test seq match
				for (var index = 0; index < data.found_hits.length; ++index) {
					var current_hit = data.found_hits[index];
					console.log("changing div: match_"+index);
					hmmer_seq_match(document.getElementById("match_"+index) , current_hit);
				}		
			var parent_id = "#no_"+i+"parent";
			var son_id = "#no_"+i;
			var chart = new PfamGraphic(parent_id, example_sequence);
			chart.render();
			var new_width = $(son_id).parent().width();
			chart.resize( new_width  );
		}
	}


	seq_match.update_table = function(new_data){
		return data_table;

	}
	function draw_domain_hit (d,axisScale){
	  var offset = 5.5;


	  // var start = "M"+axisScale(d.alihmmfrom)+",0"
	  // var start_end = "L"+axisScale(d.alihmmto)+",0";
	  // var down_end = "L"+axisScale(d.jenv)+","+2*offset;
	  // var down_start = "L"+axisScale(d.ienv)+","+2*offset;
	  // var up_start = "L"+axisScale(d.alihmmfrom)+",0";


	  var start = "M"+axisScale(d.alihmmfrom)+",0"
	  var start_end = "M"+axisScale(d.alihmmto)+",0";
	  var down_end = "L"+axisScale(d.jenv)+","+2*offset;
	  var down_start = "M"+axisScale(d.ienv)+","+2*offset;
	  var up_start = "L"+axisScale(d.alihmmfrom)+",0";



	  var full_path = start+""+start_end+""+down_end+""+down_start+""+up_start;
	  // var path = "M"+i*1",

	  return full_path;

	}
	function update_pdb_viewer(d){
		console.log("update pdb viewer with this entry: ",d);
		var curr_hit = curr.data;
		var uniprot_mappings = d.mapping.uniprot;
		var pdb_mappings = [d.mapping.pdb];
		var hit_positions = curr_hit.domains.map(function(domain){return [domain.iali,domain.jali]})
   	 	// can we map?
		 if(typeof hit_positions !== 'undefined' && typeof pdb_mappings !== 'undefined'){
   		 	 for (var hit_index = 0; hit_index < hit_positions.length; ++hit_index) {
   			 	 var match = hit_positions[hit_index];
				  for (var map_index = 0; map_index < uniprot_mappings.length; ++map_index) {
					  var pdb_map = uniprot_mappings[map_index].mapping;
						 if(typeof pdb_map.uniprot.start !== 'undefined' && typeof pdb_map.uniprot.end !== 'undefined'){
							 if(pdb_map.uniprot.start > match[1] || pdb_map.uniprot.end  < match[0]){
   							 // console.log("unfortunately, there is no overlap");
   							 // show_pdb_entry = 0;
   							 // div.innerHTML = "Sorry no pdb with overlapping matching region found.";
							}
							 else{
								 show_pdb_entry = 1; 
							 }
   						 }
					 }		    
				 }
			 }
		
		hmmer_vis.dispatch.update_pdb_viewer({"message": "please update",
					'pdb_id': d.id,
					'chain' : d.chain,
		// 'hit_positions' : hit_positions,
		'pdb_region' : pdb_mappings,
	})
		// hmmer_pdb_viewer(document.getElementById("pdb_div"), d.id+"_"+d.chain, pdb_positions, pdb_mappings);
		
	}

	function set_colors(svg){
		var gradient = svg.append("svg:defs").append("svg:linearGradient")
		.attr("id", "line_gradient")
		.attr("webkit-tap-highlight-color", "rgba(0, 0, 0, 0)").attr("x1", "1.8369701987210297e-16").attr("y1", "0").attr("x2", "0").attr("y2", "1").attr("gradientTransform", "matrix(1,0,0,1,0,0)");
		gradient.append("svg:stop").attr('offset', '0%').attr('stop-color',"#999999").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
		gradient.append("svg:stop").attr('offset', '40%').attr('stop-color',"#eeeeee").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
		gradient.append("svg:stop").attr('offset', '60%').attr('stop-color',"#cccccc").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
		gradient.append("svg:stop").attr('offset', '100%').attr('stop-color',"#999999").style("-webkit-tap-highlight-color","rgba(0, 0, 0, 0)")
	}

	return seq_match;
};



hmmer_vis.sunburst = function() {
	"use strict";
	var svg, nodes, color_index = {}, histogram, tooltip, piechart, images;
	var conf = {
		width: 680,
		height: 330,
		tree_type : 'dist_tree',
		// radius: Math.min(conf.width, conf.height) / 2,
		x: d3.scale.linear().range([0, 2 * Math.PI]),
		// y: d3.scale.sqrt().range([0, radius]),
		hue: d3.scale.category20c(),
		luminance: d3.scale.sqrt().domain([0, 1e6]).clamp(true).range([90, 20]),
		color: d3.scale.category20c(),
		totalSize: 0,
		// Breadcrumb dimensions: width, height, spacing, width of tip/tail.
		breadcrumb_dim : { w: 75, h: 30, s: 3, t: 10},
		opacity : {full_fadeout: 0.3},
		legend_li : {w: 65, h: 10, s: 3, r: 3},
		image_folder: "../../data/images/",
		total_hit_number: 0,
		node_stats : {}
	};
	conf.radius = Math.min(conf.width, conf.height) / 2;
	conf.y = d3.scale.sqrt().range([0, conf.radius]);
	conf.arc = d3.svg.arc()
			.startAngle(function(d) {
				return Math.max(0, Math.min(2 * Math.PI, conf.x(d.x)));
			})
			.endAngle(function(d) {
				return Math.max(0, Math.min(2 * Math.PI, conf.x(d.x + d.dx)));
			})
			.innerRadius(function(d) {
				return Math.max(0, conf.y(d.y));
			})
			.outerRadius(function(d) {
				return Math.max(0, conf.y(d.y + d.dy));
			});
			
	var model_organisms = {
		"Homo sapiens": conf.image_folder+"Homo-sapiens.svg",
		"Mus musculus": conf.image_folder+"Mus-musculus.svg",
		"Gallus gallus": conf.image_folder+"Gallus-gallus.svg",
		"Drosophila melanogaster": conf.image_folder+"Drosophila-melanogaster.svg",
		"Dictyostelium discoideum": conf.image_folder+"Dictyostelium-discoideum.svg",
		"Danio rerio": conf.image_folder+"Danio-rerio.svg",
		"Caenorhabditis elegans": conf.image_folder+"Caenorhabditis-elegans.svg",
		"Arabidopsis thaliana": conf.image_folder+"Arabidopsis-thaliana.svg",
		"Saccharomyces cerevisiae": conf.image_folder+"Saccharomyces-cerevisiae.svg",
		"Schizosaccharomyces pombe": conf.image_folder+"Schizosaccharomyces-pombe.svg",
		"Yersinia pestis": conf.image_folder+"Yersinia-pestis.svg",
	};
	var predefined_views = {
		'root': 1,
		'fungi': 2,
		'metazoa': 2,
		'vertebrata': 2,
		'viruses' : 1,
		'bacteria' : 1,
		'eukaryota' : 1,
		'archaea' : 1,
		'all' : 0,
		
		// "Mus musculus": 1,
		// "Gallus gallus": 1,
		// "Drosophila melanogaster": 1
	};


	// The cbak returned
	var sunburst = function(div, histogram_vis, piechart_vis) {
		histogram = histogram_vis;
		piechart = piechart_vis;
		
		svg = d3.select("#chart").append("svg")
			.attr("width", conf.width)
			.attr("height", conf.height)
			.append("svg:g")
			.attr("id", "container")
		// .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")")
		    .append("g")
			.attr("transform", "translate(" + conf.width / 2 + "," + (conf.height / 2 + 10) + ")");
		var partition = d3.layout.partition()
			.sort(null)
			.value(function(d) {
				return d.size;
			});
			
		tooltip = d3.select("#chart")
		    .append("div")
		    .attr("class", "tooltip")
		    .style("position", "absolute")
		    .style("z-index", "10")
		    .style("opacity", 0);
		
		

		// //Tooltip description
// 		var tooltip = d3.select("body")
// 			.append("div")
// 			.attr("id", "tooltip")
// 			.style("position", "absolute")
// 			.style("z-index", "10")
// 			.style("opacity", 0);
		// Keep track of the node that is currently being displayed as the root.
		var node;

		// d3.json("../../data/taxon.json", function(error, root) {
		 // d3.json("../../data/ecoli_dist.json", function(error, root) {
		 // d3.json("../../data/ecoli_full.json", function(error, root) {
		  d3.json("../../data/full.json", function(error, root) {
			node = root;
			if (error) return console.warn(error);
			// if(tree_type == 'full_tree'){
				var total_hit_number = 0;
				conf.tree_type = 'full_tree';
				if(conf.tree_type !== "dist_tree"){
					tag_value(node);
				}
				
				function tag_value(d) {
				    if (typeof d == "object") {
						d.children = d[0];
						d.taxid = d[1];
						d.short = d[2];
						d.left = d[3];
						d.right = d[4];
						d.hit_number = d[5];
						d.parent_node = d[6];
						d.hits_distribution = d[7];
						d.unknown = d[8];
						d.moreCount = d[9];
						d.value = d.hit_number; // important for magnify function
						if(d.short == "All"){
							conf.total_hit_number = d.hit_number;
						}
						d._children = d.children;
						d.sum = d.value;
						// d.key = key(d);
						// d.missing = Math.random()>0.5? 0:1;
						d.found = d.count? d.count[0]  :0;
						if (typeof d.missing === 'undefined') {
							d.missing = {}; 
						}	
						d.missing.complete = d.count? d.count[1] : 0;
						d.missing.incomplete = d.count? d.count[2] : 0;
					
						 d.fill = d.hit_number > 0 ? fill(d): "grey";
						color_index[d.short.toLowerCase()] = d.found > 1 ? d.fill: "grey";
						
						// check if we can extract some numbers
						if(predefined_views.hasOwnProperty(d.short.toLowerCase())){
								// predefined_views[d.short]
							conf.node_stats[d.short.toLowerCase()] = d.hit_number;
						}
						
						if(d.children){
							for (var child of d.children){
								tag_value(child);
							}
						}
				        
				    } else {
				        // Not an object, ignore
				    }
				}
				

			console.log("total of "+total_hit_number+" hits found");
			initializeBreadcrumbTrail();
			// drawLegend();
			// For efficiency, filter nodes to keep only those large enough to see.
	    	nodes = partition.nodes(node)
	        	.filter(function(d) {
					var test = d.short.toLowerCase();
					var test2 = predefined_views.hasOwnProperty(d.short.toLowerCase());
					// if(predefined_views.hasOwnProperty(d.short.toLowerCase()))
					 return predefined_views.hasOwnProperty(d.short.toLowerCase())
					// return (d.dx > 0.005); // 0.005 radians = 0.29 degrees
				});


				svg.append("svg:circle").attr("r", conf.radius).style("opacity", 0);

			partition
				.value(function(d) {
					return 1;
					if(conf.tree_type == 'dist_tree'){
						// return d.size;
						var test = d.count.reduce(function(pv, cv) { return pv + cv; }, 0);
						return d.count.reduce(function(pv, cv) { return pv + cv; }, 0);
					}
					else{
						return d.hit_number;
					}
					// return d.get_node_size;
				})
				.nodes(root)
				// .forEach(function(d) {
// 					d._children = d.children;
// 					d.sum = d.value;
// 					// d.key = key(d);
// 					// d.missing = Math.random()>0.5? 0:1;
// 					d.found = d.count? d.count[0]  :0;
// 					if (typeof d.missing === 'undefined') {
// 						d.missing = {};
// 					}
// 					d.missing.complete = d.count? d.count[1] : 0;
// 					d.missing.incomplete = d.count? d.count[2] : 0;
//
// 					 d.fill = d.found > 0 ? fill(d): "grey";
// 					color_index[d.short.toLowerCase()] = d.found > 1 ? d.fill: "grey";
// 				});

			// // Now redefine the value function to use the previously-computed sum.
 			partition
			 .children(function(d, depth) { return depth < 4 ? d._children : null; })
// 			.value(function(d) {
// 				return d.sum;
// 			});


			var path_all = svg.datum(root).selectAll("path").data(partition.nodes);
			var pathEnter = path_all.enter().append("svg:g").attr("class", "path_group")
			
			// var path_base = svg.datum(root).selectAll("path")
//	.data(partition.nodes).enter()
			var path = pathEnter
				.append("path")
				.attr("d", conf.arc)
				.attr("id", function(d) {
					// if(predefined_views.hasOwnProperty(d.short)){
						var test_node = d.short.toLowerCase().replace(' ','')+"_node";
						return test_node;
					// }
				})
				.on("mouseover", mouseover)
				.on("mousemove", mousemove)
				.style("fill", function(d) {
					return d.fill;
				})
				.style("opacity", function(d) {
					if (d.parent && d.parent.score) {
						if (d.parent.score > 0.5) {
							return 1;
						} else {
							return 1;
						}
					}

				})

			// .style("fill", function(d) { return color((d.children ? d : d.parent).name); })
				 .on("click", click)
				// .on("click", magnify)
				.each(stash);
				// .append("text")
// 				  .style("font-size",20)
// 				  .append("textPath")
// 				  .attr("textLength",function(d,i){
// 					  console.log("i is "+i);
// 					  return i;
// 					  return 90-i*5;
// 				  })
// 				  .attr("xlink:href",function(d,i){return "#s"+i;})
// 				  .attr("startOffset",function(d,i){return 3/20;})
// 				  .attr("dy","-1em")
// 				  .text(function(d){return d.short;})

			  // var thing = pathEnter.
  // 						filter(function(d) {
  // 						 					return predefined_views[d.short.toLowerCase()];
  // 						 })
  // 						.append("g")
  // 			    		.attr("id","thing")
  // 			    		.style("fill","navy")
  // 			    		.attr("class", "label");
  //
  // 			  var arcs = pathEnter.append("path")
  // 			   					.attr("fill","red")
  // 			   					.attr("id", function(d,i){return "s"+i;})
  // 			   					.attr("d",conf.arc);
  //
  // 			  thing.append("text")
  // 			    .style("font-size",10)
  // 			    .append("textPath")
  // 			    .attr("textLength",function(d,i){
  // 					return 90;
  // 				})
  // 			    .attr("xlink:href",function(d,i){return "#s"+i;})
  // 			    // .attr("startOffset",function(d,i){return 3/20;})
  // 			    // .attr("dy","-1em")
  // 			    .text(function(d){return d.short;})
				


			// add model organism images
			images = pathEnter.append("svg:image")
				   .attr("xlink:href", function(d){
					   var test = conf.arc.centroid(d);
					   return model_organisms[d.short];
				   })
				   .attr("transform", function(d) { 
								var c = conf.arc.centroid(d);
								// console.log("c0: "+c[0]+" "+c[1]+" "+c[2]+" "+c[3]);
								return "translate(" + c[0]*1.1 +"," + c[1]*1.1 + ")";
								 // rotate ("+c[1]+")";
						})
				    .attr("width", 20)
				   .attr("height", 20)
				   .style("opacity", function(d){
					   if(!d.count || d.count[0] < 1){
						   return 0.1;
					   }
					   else{
						   return 1;
					   }
				   });
						


			// Attach symbols
			//
			// switch tree layout
			d3.selectAll("input").on("change", function change() {
				console.log("let's show the full tree now");	
				
				var value = this.value === "count" ? function() {
						return 1;
					} : function(d) {
						return d.size;
					};

				path
					.data(partition.value(value).nodes)
					.transition()
					.duration(1000)
					.attrTween("d", arcTweenData);
			});
			// mouse click
			function click(d) {
				node = d;
				var arczoomvalue = arcTweenZoom(d)
				path.transition()
					.duration(1000)
					.attrTween("d", arcTweenZoom(d));

				d3.select("#view_scores").
				style("visibility", "");
			}
			
			// Distort the specified node to 80% of its parent.
			function magnify(node) {
			  if (parent = node.parent) {
			    var parent,
			        x = parent.x,
			        k = .8;
			    parent.children.forEach(function(sibling) {
			      x += reposition(sibling, x, sibling === node
			          ? parent.dx * k / node.value
			          : parent.dx * (1 - k) / (parent.value - node.value));
			    });
			  } else {
			    reposition(node, 0, node.dx / node.value);
			  }
			  

			  path.transition()
			      .duration(750)
			      .attrTween("d", arcTween);
				  
				images.transition()
			      .duration(750)  
				  .attr("transform", function(d) { 
							var c = conf.arc.centroid(d);
							// console.log("c0: "+c[0]+" "+c[1]+" "+c[2]+" "+c[3]);
							return "translate(" + c[0]*1.1 +"," + c[1]*1.1 + ")";
						})
			  // broadcast to widget that data should be filtered
						 // if(!node.children){
							 var model_o = ["Homo sapiens",
							 "Mus musculus","Sarcophilus harrisii","Takifugu rubripes"];
							 var species_name = model_o[Math.floor((Math.random() * 3) + 1)];
							 hmmer_vis.dispatch.search_table({'search_term' : species_name});	
						// } "Yersinia pestis": conf.im
			
						
			}
			// Interpolate the arcs in data space.
			function arcTween(a) {
			  var i = d3.interpolate({x: a.x0, dx: a.dx0}, a);
			  return function(t) {
			    var b = i(t);
			    a.x0 = b.x;
			    a.dx0 = b.dx;
			    return conf.arc(b);
			  };
			}

			// Recursively reposition the node at position x with scale k.
			function reposition(node, x, k) {
			  node.x = x;
			  if (node.children && (n = node.children.length)) {
			    var i = -1, n;
			    while (++i < n) x += reposition(node.children[i], x, k);
			  }
			  return node.dx = node.value * k;
			}
			
			
			d3.select("#reset")
           		.on("click", function() {
					var root_node = d3.select("#root_node");
					var check = simulateClick(root_node[0][0]);
			});
			d3.select("#metazoa")
        		.on("click", function() {
					var metazoa_node = d3.select("#metazoa_node");
					var check = simulateClick(metazoa_node[0][0]);
			});
			d3.select("#fungi")
    			.on("click", function() {
					var metazoa_node = d3.select("#fungi_node");
					var check = simulateClick(metazoa_node[0][0]);
			});
			d3.select("#viruses")
    			.on("click", function() {
					var metazoa_node = d3.select("#viruses_node");
					var check = simulateClick(metazoa_node[0][0]);
			});
			d3.select("#eubacteria")
				.on("click", function() {
					var metazoa_node = d3.select("#eubacteria_node");
					var check = simulateClick(metazoa_node[0][0]);
				});
			d3.select("#show_model_orga")
				.on("click", function() {
					d3.selectAll(".model_orga_pin")
					.style("visibility", "");
				});
						
						
			// for (var tax_level of ["root",'Metazoa','Mammalia']){
// 				console.log("checking "+tax_level);
// 				d3.select("#"+tax_level)
//             		.on("click", function() {
// 					var level_node = d3.select("#"+tax_level+"_node");
// 					var elem = level_node[0][0];
// 					if(elem){
// 						var check = simulateClick(level_node[0][0]);
// 					}
//
// 				});
// 			}
			// make sure this is done after setting the domain
			// drawLegend();

		    var uniqueNames = (function(a) {
		          var output = [];
		          a.forEach(function(d) {
		              if (output.indexOf(d.short) === -1) {
		                  output.push(d.short);
		              }
		          });
		          return output;
		      })(nodes);
		    // set domain of colors scale based on data
		    conf.color.domain(uniqueNames);
  
		    // make sure this is done after setting the domain
		    drawLegend();

			d3.select("#container").on("mouseleave", mouseleave);
			conf.totalSize = path.node().__data__.value;
		});
	};


	function getAngle(d) {
			var arc = conf.arc;
	        var thetaDeg = (180 / Math.PI * (arc.startAngle()(d) + arc.endAngle()(d)) / 2 - 90);
	        return (thetaDeg > 90) ? thetaDeg - 180 : thetaDeg;
	}
		
	function mouseover(d) {

		var percentage = (100 * d.value / conf.totalSize).toPrecision(3);
		var percentageString = percentage + "%";
		if (percentage < 0.1) {
			percentageString = "< 0.1%";
		}
		// tell the histogram to update
		// namespace.dispatch.histogram_update({"message": "please update",
// 										'count' : d.count})
//
		// hmmer_vis.dispatch.update({"message": "please update",
	// 	'hits_distribution' : d.hits_distribution,
	// 									'count' : d.count})
		hmmer_vis.dispatch.update_histogram({"message": "please update", 
		'hits_distribution' : d.hits_distribution,
										'count' : d.count})	
		
		
		
		  //histogram.redraw();
		// wordcloud.redraw();
		 // if(d.count){
		 // 			  piechart.redraw(d.count);
		 // }
		d3.select("#percentage").text(percentageString);
		d3.select("#explanation").style("visibility", "");
			
		d3.select("#no_curr_hits").text("Number of hits: "+d.hit_number+" ("+conf.total_hit_number+")");
		d3.select("#no_curr_hits").style("visibility", "");
		

		var sequenceArray = getAncestors(d);
		updateBreadcrumbs(sequenceArray, percentageString);

		// Fade all the segments.
		d3.selectAll("path")
			.style("opacity", conf.opacity.full_fadeout);

		// Then highlight only those that are an ancestor of the current segment.
		svg.selectAll("path")
			.filter(function(node) {
				return (sequenceArray.indexOf(node) >= 0);
			})
			.style("opacity", 1);

		tooltip.html(function() {
                var name = format_name(d);
                return name;
         });
         tooltip.transition()
              .duration(50)
              .style("opacity", 0.9);
		

		// tooltip.html(format_description(d));
// 		return tooltip.transition()
// 			.duration(50)
// 			.style("opacity", 0.9);
	}

	function get_node_size(d){
		if(conf.tree_type == 'dist_tree'){
			return d.count.reduce(function(pv, cv) { return pv + cv; }, 0);
		}
		else{
			return d.size;
		}
		
	}

 	function mousemove(d) {
		 tooltip
           .style("top", (d3.event.pageY-200)+"px")
           .style("left", (d3.event.pageX)+"px");
	}
	// Restore everything to full opacity when moving off the visualization.

	function mouseleave(d) {

		// Hide the breadcrumb trail
		d3.select("#trail").style("visibility", "hidden");

		// Deactivate all segments during transition.
		d3.selectAll("path").on("mouseover", null);

		// Transition each segment to full opacity and then reactivate it.
		d3.selectAll("path")
			.transition()
			.duration(500)
			.style("opacity", 1)
			.each("end", function() {
				d3.select(this).on("mouseover", mouseover);
			});

		d3.select("#explanation").style("visibility", "hidden");
		d3.select("#no_curr_hits").style("visibility", "hidden");
		
	   $('#testtable').DataTable()
	    .search( '' )
	    .columns().search( '' )
	    .draw();
		
		tooltip.style("opacity", 0);
		// return tooltip.style("opacity", 0);
	}

	// When zooming: interpolate the scales.
	function arcTweenZoom(d) {
	  var x = conf.x,y = conf.y, radius = conf.radius, arc = conf.arc,
		  xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
	      yd = d3.interpolate(y.domain(), [d.y, 1]),
			yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
	  return function(d, i) {
	    return i
	        ? function(t) { return arc(d); }
	        : function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); return arc(d); };
	  };
	}
	// When switching data: interpolate the arcs in data space.
	function arcTweenData(a, i) {
		var x = conf.x,y = conf.y, radius = conf.radius, arc = conf.arc;
	  var oi = d3.interpolate({x: a.x0, dx: a.dx0}, a);
	  function tween(t) {
	    var b = oi(t);
	    a.x0 = b.x;
	    a.dx0 = b.dx;
	    return arc(b);
	  }
	  if (i == 0) {
	   // If we are on the first arc, adjust the x domain to match the root node
	   // at the current zoom level. (We only need to do this once.)
	    var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]);
	    return function(t) {
	      x.domain(xd(t));
	      return tween(t);
	    };
	  } else {
	    return tween;
	  }
	}
	// Setup for switching data: stash the old values for transition.

	function stash(d) {
		d.x0 = d.x;
		d.dx0 = d.dx;
	}

	function fill(d) {
		var p = d;
		while (p.depth > 1) p = p.parent;
		var c = d3.lab(conf.hue(p.short));
		c.l = conf.luminance(d.hit_number);
		return c;
	}

// 		return tooltip
// 			.style("top", (d3.event.pageY - 10) + "px")
// 			.style("left", (d3.event.pageX + 10) + "px");
// 	}

	// Given a node in a partition layout, return an array of all of its ancestor
	// nodes, highest first, but excluding the root.


	sunburst.node_name = function(node) {
		return node.property('name');
    };

	function getAncestors(node) {
		var path = [];
		var current = node;
		while (current.parent) {
			path.unshift(current);
			current = current.parent;
		}
		return path;
	}

	function initializeBreadcrumbTrail() {
	  // Add the svg area.
	  var trail = d3.select("#sequence").append("svg:svg")
	      .attr("width", conf.width)
	      .attr("height", 50)
	      .attr("id", "trail");
	  // Add the label at the end, for the percentage.
	  trail.append("svg:text")
	    .attr("id", "endlabel")
	    .style("fill", "#000");
	}

	function simulateClick(elem /* Must be the element, not d3 selection */) {
        var evt = document.createEvent("MouseEvents");
        evt.initMouseEvent(
            "click", /* type */
            true, /* canBubble */
            true, /* cancelable */
            window, /* view */
            0, /* detail */
            0, /* screenX */
            0, /* screenY */
            0, /* clientX */
            0, /* clientY */
            false, /* ctrlKey */
            false, /* altKey */
            false, /* shiftKey */
            false, /* metaKey */
            0, /* button */
            null); /* relatedTarget */
        	elem.dispatchEvent(evt);
        // return check = true;
	}

	function format_name(d) {
	    var name = d.short;
	        return  '<b>' + name + '</b><br> (' + d.hit_number + ')';
	}

	function drawLegend() {

	    // Dimensions of legend item: width, height, spacing, radius of rounded rect.
	    var li = conf.legend_li;

	    var legend = d3.select("#legend").append("svg:svg")
	        .attr("width", li.w * 3)
	        // .attr("height", colors.domain().length * (li.h + li.s))
	        .attr("height", 100)
	        ;

	    var g = legend.selectAll("g")
	        .data(conf.color.domain())
	        .enter().append("svg:g")
	        .attr("transform", function(d, i) {
	                return "translate("+predefined_views[d.toLowerCase()]*55+"," + i * (li.h + li.s) + ")";
	             });

	    g.append("svg:rect")
	        .attr("rx", li.r)
	        .attr("ry", li.r)
	        .attr("width", li.w)
	        .attr("height", li.h)
	        .style("fill", function(d) { 
				var test3 = d.fill;
				return color_index[d.toLowerCase()]; });

	    g.append("svg:text")
	        .attr("x", li.w / 2)
	        .attr("y", li.h / 2)
	        .attr("dy", "0.35em")
	        .attr("text-anchor", "middle")
	        .text(function(d) { 
				var test;
				return d+" ("+conf.node_stats[d.toLowerCase()]+")"; });
	}

	function toggleLegend() {
	    var legend = d3.select("#legend");
	    if (legend.style("visibility") == "hidden") {
	      legend.style("visibility", "");
	    } else {
	      legend.style("visibility", "hidden");
	    }
	  }

	// Generate a string that describes the points of a breadcrumb polygon.
	function breadcrumbPoints(d, i) {
	  var points = [];
	  points.push("0,0");
	  points.push(conf.breadcrumb_dim.w + ",0");
	  points.push(conf.breadcrumb_dim.w + conf.breadcrumb_dim.t + "," + (conf.breadcrumb_dim.h / 2));
	  points.push(conf.breadcrumb_dim.w + "," + conf.breadcrumb_dim.h);
	  points.push("0," + conf.breadcrumb_dim.h);
	  if (i > 0) { // Leftmost breadcrumb; don't include 6th vertex.
	    points.push(conf.breadcrumb_dim.t + "," + (conf.breadcrumb_dim.h / 2));
	  }
	  return points.join(" ");
	}

	// Update the breadcrumb trail to show the current sequence and percentage.
	function updateBreadcrumbs(nodeArray, percentageString) {

	  // Data join; key function combines name and depth (= position in sequence).
	  var g = d3.select("#trail")
	      .selectAll("g")
	      .data(nodeArray, function(d) { return d.short + d.depth; });

	  // Add breadcrumb and label for entering nodes.
	  var entering = g.enter().append("svg:g");

	  entering.append("svg:polygon")
	      .attr("points", breadcrumbPoints)
	      .style("fill", function(d) { return d.fill; });

	  entering.append("svg:text")
	      .attr("x", (conf.breadcrumb_dim.w + conf.breadcrumb_dim.t) / 2)
	      .attr("y", conf.breadcrumb_dim.h / 2)
	      .attr("dy", "0.35em")
	      .attr("text-anchor", "middle")
	      .text(function(d) { return d.short; });

	  // Set position for entering and updating nodes.
	  g.attr("transform", function(d, i) {
	    return "translate(" + i * (conf.breadcrumb_dim.w + conf.breadcrumb_dim.s) + ", 0)";
	  });

	  // Remove exiting nodes.
	  g.exit().remove();

	  // Now move and update the percentage at the end.
	  d3.select("#trail").select("#endlabel")
	      .attr("x", (nodeArray.length + 0.5) * (conf.breadcrumb_dim.w + conf.breadcrumb_dim.s))
	      .attr("y", conf.breadcrumb_dim.h / 2)
	      .attr("dy", "0.35em")
	      .attr("text-anchor", "middle")
	      .text(percentageString);

	  // Make the breadcrumb trail visible, if it's hidden.
	  d3.select("#trail")
	      .style("visibility", "");

	}

	return sunburst;
};



hmmer_vis.sunburst2 = function() {
	"use strict";
	var svg, nodes, color_index = {}, tree_legend,tooltip, images, i=0;
	var conf = {
		width: 680,
		height: 370,
		tree_type : '',
		// radius: Math.min(conf.width, conf.height) / 2,
		x: d3.scale.linear().range([0, 2 * Math.PI]),
		// y: d3.scale.sqrt().range([0, radius]),
		hue: d3.scale.category20c(),
		luminance: d3.scale.sqrt().domain([0, 1e6]).clamp(true).range([90, 20]),
		color: d3.scale.category20c(),
		totalSize: 0,
		// Breadcrumb dimensions: width, height, spacing, width of tip/tail.
		breadcrumb_dim : { w: 75, h: 30, s: 3, t: 10},
		opacity : {full_fadeout: 0.3},
		legend_li : {w: 85, h: 10, s: 3, r: 3},
		image_folder: "../../data/images/",
		total_hit_number: 0,
		node_stats : {},
		tree_legend : {},
	};
	
	
	var kingdom_colors = {'Bacteria' : '#900',
						  'Eubacteria (bacteria)' : '#900',
						  // 'Eukaryota' : '#666600', 
						  'Eukaryota' :'#999900',
						  // 'Eukaryota' :'#f3c800',
						  'Archaea': '#009dcc',
						   'Virus' : '#ff0000',
					      'Unclassified': '#999',
							'oth': '#333'
	}
	var kingdom_colors_legend = [{'taxon': 'Bacteria','color' : '#900'},
						{'taxon':'Eukaryota','color' :'#f3c800'},
					  {'taxon': 'Archeae','color': '#009dcc'},
					   {'taxon': 'Virus','color' : '#ff0000'},
				      {'taxon': 'Unclassified','color': '#999'},
						{'taxon': 'oth','color': '#333'}
					]


	var count = 0;
	conf.radius = Math.min(conf.width, conf.height) / 2;
	conf.y = d3.scale.sqrt().range([0, conf.radius]);
	conf.arc = d3.svg.arc()
	.startAngle(function(d) {
		return Math.max(0, Math.min(2 * Math.PI, conf.x(d.x)));
	})
	.endAngle(function(d) {
		return Math.max(0, Math.min(2 * Math.PI, conf.x(d.x + d.dx)));
	})
	.innerRadius(function(d) {
		return Math.max(0, conf.y(d.y));
	})
	.outerRadius(function(d) {
		return Math.max(0, conf.y(d.y + d.dy));
	});

	var model_organisms = {
		"Homo sapiens": conf.image_folder+"Homo-sapiens.svg",
		"Mus musculus": conf.image_folder+"Mus-musculus.svg",
		"Gallus gallus": conf.image_folder+"Gallus-gallus.svg",
		"Drosophila melanogaster": conf.image_folder+"Drosophila-melanogaster.svg",
		"Dictyostelium discoideum": conf.image_folder+"Dictyostelium-discoideum.svg",
		"Danio rerio": conf.image_folder+"Danio-rerio.svg",
		"Caenorhabditis elegans": conf.image_folder+"Caenorhabditis-elegans.svg",
		"Arabidopsis thaliana": conf.image_folder+"Arabidopsis-thaliana.svg",
		"Saccharomyces cerevisiae": conf.image_folder+"Saccharomyces-cerevisiae.svg",
		"Schizosaccharomyces pombe": conf.image_folder+"Schizosaccharomyces-pombe.svg",
		"Yersinia pestis": conf.image_folder+"Yersinia-pestis.svg",
	};
	var predefined_views = {
		'root': 1,
		'fungi': 2,
		'metazoa': 2,
		'vertebrata': 2,
		'homo sapiens':3,
		'mus musculus':3,
		'Saccharomyces cerevisiae' : 3,
		'viruses' : 1,
		'bacteria' : 1,
		'eukaryota' : 1,
		'archaea' : 1,
		'all' : 0,

		// "Mus musculus": 1,
		// "Gallus gallus": 1,
		// "Drosophila melanogaster": 1
	};

	// keeping a copy of the current data
	var curr = {
		tree : undefined,
		data : undefined,
		nodes : undefined,
		path: undefined,
		partition : undefined
	};
	
	var base = {
		tree : undefined,
		data : undefined,
		nodes : undefined,
		path: undefined,
		partition : undefined
	};

	var best_hits_lookup = {}
	// The cbak returned
	var sunburst2 = function(div, data, tree_type, best_hits) {

		// turn best hits into a dictionary
		// this allows us to plot the best hits onto the tree
		
		for(var i = 0; i < best_hits.length; i++) {
			var current_hit = best_hits[i];
			// best_hits_lookup[current_hit.species] = current_hit;
			if(!best_hits_lookup[current_hit.species]){
					best_hits_lookup[current_hit.species] = [];
			}
			best_hits_lookup[current_hit.species].push(i+1);
		}

		svg = d3.select(div).append("svg")
		.attr("width", conf.width)
		.attr("height", conf.height)
		.append("svg:g")
		.attr("id", "container")
		.append("g")
		// .attr("transform", "translate(" + conf.width / 3 + "," + ((conf.height / 2 )+ 40) + ")");
		.attr("transform", "translate(" + conf.width / 3 + ",200)");


		curr.partition = d3.layout.partition()
		.sort(null)
		// .value(function(d) {
// 			return d.hit_number;
// 		});

		tooltip = d3.select(div)
		.append("div")
		.attr("class", "tooltip")
		.style("position", "absolute")
		.style("z-index", "10")
		.style("opacity", 0);

		// Keep track of the node that is currently being displayed as the root.
		var node;
			curr.data = data;
			sunburst2.data(data);
			// curr.tree_type = "full_tree";
			sunburst2.tree_type(tree_type);
			sunburst2.update();
			// we don't use breadcrumbs anymore, have our own lineage view now
			initializeBreadcrumbTrail();
	};


	sunburst2.update = function(){
		// clean json
		process_json(curr.data);
		// tell the tree to update
		hmmer_vis.dispatch.update_tree_legend({"message": "please update",
		'tree_legend_data' : conf.tree_legend})
		//enter selection
		// curr.nodes = cluster.nodes(curr.data);
		curr.predefined_nodes = curr.partition.nodes(curr.data)
		.filter(function(d) {
			return predefined_views.hasOwnProperty(d.short.toLowerCase())
		});

		var partition = d3.layout.partition()
		.sort(null)
		// .value(function(d) {
//  			return d.hit_number;
//  			return d.count? d.count[0] : d.hit_number;
//  		});

		var arc = d3.svg.arc()
		.startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, conf.x(d.x))); })
		.endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, conf.x(d.x + d.dx))); })
		.innerRadius(function(d) { return Math.max(0, conf.y(d.y)); })
		.outerRadius(function(d) { return Math.max(0, conf.y(d.y + d.dy)); });
		var path;
		var color = d3.scale.category20c();




		// d3.json('../../data/dist.json',
		// function (err, json) {
		// curr.tree_type("dist_tree");
		// process_json(json);
		curr.path = svg.selectAll("path")
		.data(partition.nodes(curr.data), function(d){ return d.short});

		curr.leaf_path = svg.selectAll("path")
		.filter(function(d) {
		  return d.children === null && d.short in model_organisms;
		})
		.data(partition.nodes(curr.data), function(d){ return d.short});


		curr.enter_leaf_selection = curr.leaf_path.enter();
		curr.enter_selection = curr.path.enter();
		curr.enter_selection.append("path")
		.attr("d", arc)
		.attr("id", function(d){ return "id_"+d.short.replace(' ','');})
		.style("fill", function(d) { 
			if(d.fill){
				// console.log("current is: "+d.fill);
				var new_color = d3.rgb(d.fill).brighter(.2 * d.depth);
				// console.log("new is "+new_color);
				return new_color;
			}
			else{
				if(d.parent){
					var parent_color = d.parent.color;
					var brighter_color = d3.rgb(parent_color).brighter(.2 * d.depth);
					d.fill = brighter_color;
					return brighter_color;
				}
				else{return "white"}
			}
		})
		// .on("click", click)
		.on("click", _magnify)
		
		.on("mouseover", mouseover)
		.on("mousemove", mousemove)
		.each(function(d) {
			this.x0 = d.x;
			this.dx0 = d.dx;
		});


		// curr.enter_selection.filter(function(d) {
// 						return d.depth==0;
// 					})
// 		.append("text")
// 		.attr("text-anchor", "middle")
// 		.text(function(d){return d.depth == 0 ? 'Mouse over' : '';})



		var leaf_images = curr.enter_leaf_selection.append("svg:image")
	   			.attr("xlink:href", function(d){
				if(!d.children && d.short in model_organisms){
		   			var test = conf.arc.centroid(d);
				}
				return model_organisms[d.short];
			})
			.attr("transform", function(d) { 
					var c = conf.arc.centroid(d);
					// console.log("c0: "+c[0]+" "+c[1]+" "+c[2]+" "+c[3]);
					return "translate(" + c[0]*1.1 +"," + c[1]*1.1 + ")";
					 // rotate ("+c[1]+")";
			})
			.attr("width", 20)
			.attr("class","sunburst_model_organism")
			.attr("height", 20);

		// var best_hits = curr.enter_selection.append("text")
// 	   			.text(function(d,i){
// 				if(!d.children && d.short in best_hits_lookup){
// 					var test = best_hits_lookup[d.short].join()
// 					return best_hits_lookup[d.short].join();
// 				}
// 			})
// 			// .attr("transform", function(d) {
// // 					var c = conf.arc.centroid(d);
// // 					// console.log("c0: "+c[0]+" "+c[1]+" "+c[2]+" "+c[3]);
// // 					return "translate(" + c[0]*1.1 +"," + c[1]*1.1 + ")";
// // 			})
// 			.attr('x',function(d){
// 				var c = conf.arc.centroid(d);
// 				return c[0]*1.1;
// 			})
// 			.attr('y',function(d){
// 				var c = conf.arc.centroid(d);
// 				return c[1]*1.1;
// 			})
// 			.attr("class","sunburst_best_hit")





		d3.selectAll("input").on("change", function change() {
			console.log("let's show the full tree now");

			var value = this.value;
			var files = ['../../data/ecoli_dist.json','../../data/dist.json'];
			var to_use = count++ %2 == 0? files[0]: files[1];

			d3.json(to_use,
				function (err, resp) {
					curr.data = resp;
					// if(value === "dist_tree")
					sunburst2.tree_type(value);
					curr.tree_type = 'dist_tree';
					process_json(resp,"white");
					// curr.tree_type = 'dist_tree';
					if(value === "full_tree"){
						partition.children(function(d, depth) {
							return depth < 4 ? d._children : null; })
						}
						var partitioned_nodes = partition.nodes(resp);
						var new_path = svg.selectAll("path").data(partition.nodes(resp),function(d){ return d.short});

						// curr.enter_selection.data(partition.nodes(resp),function(d){ return d.short})
						new_path.transition()
						.duration(750).ease("cubic-in-out")
						.attrTween("d", arcTweenUpdate);


						new_path.enter().append("path")
						.attr("d", arc)
						// .each(function(d){  console.log(d)})
						.style("fill", function(d) { return d.fill; })
						.on("click", click)
						.on("mouseover", mouseover)
						.on("mousemove", mousemove)
						.each(function(d) {
							this.x0 = d.x;
							this.dx0 = d.dx;
						});


						new_path.exit().remove();

						hmmer_vis.dispatch.update_tree_legend({"message": "please update",
						'tree_legend_data' : conf.tree_legend})

					});
					hmmer_vis.dispatch.update_tree_legend({"message": "please update",
					'tree_legend_data' : conf.tree_legend})


				});


				var uniqueNames = (function(a) {
					var output = [];
					a.forEach(function(d) {
						if (output.indexOf(d.short) === -1) {
							output.push(d.short);
						}
					});
					return output;
				})(curr.predefined_nodes);

				// d3.select("#no_curr_hits").text(conf.total_hit_number);
//d3.select("#no_curr_hits").style("visibility", "");

				// set domain of colors scale based on data
				// conf.color.domain(uniqueNames);

				// make sure this is done after setting the domain
				drawLegend(kingdom_colors_legend);

		}


			sunburst2.tree_type = function(tree_type){
				if (!arguments.length) {
					return curr.tree_type;
				}
				curr.tree_type = tree_type;
				return sunburst2;
			}

			sunburst2.data = function (d) {
				if (!arguments.length) {
					return base.data;
				}

				// The original data is stored as the base and curr data
				base.data = d;
				curr.data = d;

				// Set up a new tree based on the data
				// var newtree = tnt.tree.node(base.data);

				// tree.root(newtree);

				//Events if data is changed the root is served as response
				//tnt.trigger("tree:data:change", base.data);

				return sunburst2;
			};

			function process_json(d,parent_color) {
				if (typeof d == "object") {
					if(curr.tree_type !== "dist_tree"){
						d.children = d[0];
						d.taxid = d[1];
						d.short = d[2];
						d.left = d[3];
						d.right = d[4];
						d.hit_number = d[5];
						d.parent_node = d[6];
						d.hits_distribution = d[7];
						d.unknown = d[8];
						d.moreCount = d[9];
						d.long = d.short;
					}
					else{
						// d.hit_number = d.count ? d.count[0]  :0;
						d.hit_number = d.count ? d.count[0]  :10;
					}

					if(d.short == "All"){
						conf.total_hit_number = d.hit_number;
						conf.totalSize = d.hit_number;
					}
					d._children = d.children;
					d.sum = d.value;
					// d.key = key(d);
					// d.missing = Math.random()>0.5? 0:1;
					// d.found = d.count? d.count[0]  :0;
					if (typeof d.missing === 'undefined') {
						d.missing = {};
					}
					d.missing.complete = d.count? d.count[1] : 0;
					d.missing.incomplete = d.count? d.count[2] : 0;

					// set value for partitioning the data
					d.value = d.hit_number ? d.missing.complete + d.hit_number : (d.missing.complete + d.hit_number)*0.01; // important for magnify function

					if(parent_color){
						d.fill = parent_color;
					}
					else{
						if(d.hit_number > 0){
							d.fill = fill(d);
							parent_color = d.fill;
						}
						else{
							d.fill = "grey";
							parent_color = d.fill;
						}
						//d.fill = d.hit_number > 0 ? fill(d): "grey";
						color_index[d.short.toLowerCase()] = d.fill;
					}
					// setting data for

					// check if we can extract some numbers
					if(predefined_views.hasOwnProperty(d.short.toLowerCase())){
						// predefined_views[d.short]
						conf.tree_legend[d.short.toLowerCase()] = {};
						conf.tree_legend[d.short.toLowerCase()]['hit_number'] = d.hit_number;
						conf.tree_legend[d.short.toLowerCase()]['fill'] = d.fill;
						conf.node_stats[d.short.toLowerCase()] = d.hit_number;
					}

					if(d.children){
						for (var child of d.children){
							process_json(child, parent_color);
						}
					}
				}
			}

			function _magnify(node) {
				if (parent = node.parent) {
					var parent,
					x = parent.x,
					k = .8;
					parent.children.forEach(function(sibling) {
						x += _reposition(sibling, x, sibling === node
							? parent.dx * k / node.value
							: parent.dx * (1 - k) / (parent.value - node.value));
						});
					} else {
						_reposition(node, 0, node.dx / node.value);
					}


					// Recursively reposition the node at position x with scale k.
					function _reposition(node, x, k) {
						node.x = x;
						if (node.children && (n = node.children.length)) {
							var i = -1, n;
							while (++i < n) x += _reposition(node.children[i], x, k);
						}
						return node.dx = node.value * k;
					}

					sunburst2.update()


			}




				// Interpolate the arcs in data space.
				// Interpolate the scales!
				function arcTween(d) {
					var xd = d3.interpolate(conf.x.domain(), [d.x, d.x + d.dx]),
					yd = d3.interpolate(conf.y.domain(), [d.y, 1]),
					yr = d3.interpolate(conf.y.range(), [d.y ? 20 : 0, conf.radius]);
					return function(d, i) {
						return i
						? function(t) { return conf.arc(d); }
						: function(t) { conf.x.domain(xd(t)); conf.y.domain(yd(t)).range(yr(t)); return conf.arc(d); };
					};
				}


				// function arcTween(a) {
				// 	var i = d3.interpolate({x: a.x0, dx: a.dx0}, a);
				// 	return function(t) {
				// 		var b = i(t);
				// 		a.x0 = b.x;
				// 		a.dx0 = b.dx;
				// 		return conf.arc(b);
				// 	};
				// }
				function arcTweenUpdate(a) {
					var i = d3.interpolate({x: this.x0, dx: this.dx0}, a);
					return function(t) {
						var b = i(t);
						if(this){
							this.x0 = b.x;
							this.dx0 = b.dx;
						}
						return conf.arc(b);
					};
				}
				function getAngle(d) {
					var arc = conf.arc;
					var thetaDeg = (180 / Math.PI * (arc.startAngle()(d) + arc.endAngle()(d)) / 2 - 90);
					return (thetaDeg > 90) ? thetaDeg - 180 : thetaDeg;
				}
				function mouseover(d) {

					var percentage = (100 * d.value / conf.totalSize).toPrecision(3);
					var percentageString = percentage + "%";
					if (percentage < 0.1) {
						percentageString = "< 0.1%";
					}
					// tell the histogram to update
					// namespace.dispatch.histogram_update({"message": "please update",
					// 										'count' : d.count})
					//
					// hmmer_vis.dispatch.update({"message": "please update",
					// 	'hits_distribution' : d.hits_distribution,
					// 									'count' : d.count})


					if(curr.tree_type !== 'dist_tree'){
						hmmer_vis.dispatch.update_histogram({"message": "please update",
						'hits_distribution' : d.hits_distribution,
						'count' : d.count})
					}



					// test to highlight hit
					d3.select("#id_Homosapiens").style('opacity', 0);


					d3.selectAll("#distribution_name").text(d.short);

					//histogram.redraw();
					// wordcloud.redraw();
					// if(d.count){
					// 			  piechart.redraw(d.count);
					// }
					d3.select("#percentage").text(percentageString);
					d3.select("#explanation").style("visibility", "");




					d3.select("#no_curr_hits").text("Current level: "+d.short+" ("+d.hit_number+")");
					d3.select("#no_curr_hits").style("visibility", "");


					var sequenceArray = getAncestors(d);

					hmmer_vis.dispatch.update_lineage_plot({"message": "please update",
					'sequenceArray' : sequenceArray})

					updateBreadcrumbs(sequenceArray, percentageString);

					// Fade all the segments.
					d3.select("#chart").selectAll("path").style("opacity", conf.opacity.full_fadeout);

					// Then highlight only those that are an ancestor of the current segment.
					svg.selectAll("path")
					.filter(function(node) {
						return (sequenceArray.indexOf(node) >= 0);
					})
					.style("opacity", 1);

					tooltip.html(function() {
						var name = format_name(d);
						return name;
					});
					tooltip.transition()
					.duration(50)
					.style("opacity", 0.9);


					// tooltip.html(format_description(d));
					// 		return tooltip.transition()
					// 			.duration(50)
					// 			.style("opacity", 0.9);
				}
				function get_node_size(d){
					if(curr.tree_type == 'dist_tree'){
						return d.count.reduce(function(pv, cv) { return pv + cv; }, 0);
					}
					else{
						return d.size;
					}

				}
				function mousemove(d) {
					tooltip
					.style("top", (d3.event.pageY)+"px")
					.style("left", (d3.event.pageX)+"px");
				}
				// Restore everything to full opacity when moving off the visualization.
				function mouseleave(d) {

					// Hide the breadcrumb trail
					d3.select("#trail").style("visibility", "hidden");

					// Deactivate all segments during transition.
					d3.selectAll("path").on("mouseover", null);

					// Transition each segment to full opacity and then reactivate it.
					d3.selectAll("path")
					.transition()
					.duration(500)
					.style("opacity", 1)
					.each("end", function() {
						d3.select(this).on("mouseover", mouseover);
					});

					d3.select("#explanation").style("visibility", "hidden");
					d3.select("#no_curr_hits").style("visibility", "hidden");

					$('#testtable').DataTable()
					.search( '' )
					.columns().search( '' )
					.draw();

					tooltip.style("opacity", 0);
					// return tooltip.style("opacity", 0);
				}
				// When zooming: interpolate the scales.
				function arcTweenZoom(d) {
					var x = conf.x,y = conf.y, radius = conf.radius, arc = conf.arc,
					xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
					yd = d3.interpolate(y.domain(), [d.y, 1]),
					yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
					return function(d, i) {
						return i
						? function(t) { return arc(d); }
						: function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); return arc(d); };
					};
				}
				// When switching data: interpolate the arcs in data space.
				function arcTweenData(a, i) {
					var x = conf.x, y = conf.y, radius = conf.radius, arc = conf.arc;
					var oi = d3.interpolate({x: a.x0, dx: a.dx0}, a);
					function tween(t) {
						var b = oi(t);
						a.x0 = b.x;
						a.dx0 = b.dx;
						return arc(b);
					}
					if (i == 0) {
						// If we are on the first arc, adjust the x domain to match the root node
						// at the current zoom level. (We only need to do this once.)
						// var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]);
						var xd = d3.interpolate(x.domain(), [curr.data.x, curr.data.x + curr.data.dx]);
						return function(t) {
							x.domain(xd(t));
							return tween(t);
						};
					} else {
						return tween;
					}
				}
				// Setup for switching data: stash the old values for transition.
				function stash(d) {
					d.x0 = d.x;
					d.dx0 = d.dx;
				}
				function fill(d) {
					var p = d;
					while (p.depth > 1) p = p.parent;
					if(p.parent == 0 || typeof p.parent ==='undefined'){
						if(kingdom_colors.hasOwnProperty(p.long)){
						   	d.color = kingdom_colors[p.long]
							return d.color;
						}
					}	
					return '';
					var c = d3.lab(conf.hue(p.short));
					c.l = conf.luminance(d.hit_number);
					return c;
				}
				// 		return tooltip
				// 			.style("top", (d3.event.pageY - 10) + "px")
				// 			.style("left", (d3.event.pageX + 10) + "px");
				// 	}
				// Given a node in a partition layout, return an array of all of its ancestor
				// nodes, highest first, but excluding the root.
				sunburst2.node_name = function(node) {
					return node.property('name');
				};

				function getAncestors(node) {
					var path = [];
					var current = node;
					while (current.parent) {
						path.unshift(current);
						current = current.parent;
					}
					return path;
				}

				function initializeBreadcrumbTrail() {
					// Add the svg area.
					var trail = d3.select("#sequence").append("svg:svg")
					.attr("width", conf.width)
					.attr("height", 50)
					.attr("id", "trail");
					// Add the label at the end, for the percentage.
					trail.append("svg:text")
					.attr("id", "endlabel")
					.style("fill", "#000");
				}

				function simulateClick(elem /* Must be the element, not d3 selection */) {
					var evt = document.createEvent("MouseEvents");
					evt.initMouseEvent(
						"click", /* type */
						true, /* canBubble */
						true, /* cancelable */
						window, /* view */
						0, /* detail */
						0, /* screenX */
						0, /* screenY */
						0, /* clientX */
						0, /* clientY */
						false, /* ctrlKey */
						false, /* altKey */
						false, /* shiftKey */
						false, /* metaKey */
						0, /* button */
						null); /* relatedTarget */
						elem.dispatchEvent(evt);
						// return check = true;
					}

					function format_name(d) {
						var name = d.short;
						return  '<b>' + name + '</b><br> (' + d.hit_number + ')';
					}
					// mouse click
					function click(d) {
						var arczoomvalue = arcTweenZoom(d)
						curr.path.transition()
						.duration(1000)
						.attrTween("d", arcTweenZoom(d));

						d3.select("#view_scores").
						style("visibility", "");

						// console.log("ok, we are searching the table now");
						if(d.children){
							hmmer_vis.dispatch.search_tableRange({'search_term' : d.short});
						}
						else{
							hmmer_vis.dispatch.search_tableSpecies({'search_term' : d.short});
						}

					}

					function drawLegend(kingdom_colors) {

						// Dimensions of legend item: width, height, spacing, radius of rounded rect.
						var li = conf.legend_li;
						// make sure to remove old legend first


						d3.select("#legend").html("<ul class='first'> \
							<li class='bact'><span>Bacteria</span></li>\
							<li class='euk'><span>Eukaryota</span></li>\
							<li class='arc'><span>Archaea</span></li>\
							<li class='vir'><span>Viruses</span></li>\
							<li class='unc'><span>Unclassified sequences</span></li>\
							<li class='oth'><span>Other</span></li>\
						</ul>");

						// d3.select("#legend svg").remove();
						return;
						var no_levels = conf.color.domain().length;
						

						var legend = d3.select("#legend").append("svg:svg")
						.attr("width", li.w * kingdom_colors.length)
						// .attr("height", colors.domain().length * (li.h + li.s))
						.attr("height", li.h);

						var g = legend.selectAll("g")
						.data(kingdom_colors)
						.enter().append("svg:g")
						.attr("transform", function(d, i) {
							return "translate(" + i * li.w + ",0)";
							// return "translate(" + i * (li.h + li.s) + ","+predefined_views[d.toLowerCase()]*55+"";
						});

						g.append("svg:rect")
						.attr("rx", li.r)
						.attr("ry", li.r)
						.attr("width", li.h)
						.attr("height", li.h)
						.style("fill", function(d) {
							var test = d.color;
							var test = d.taxon;
							return d.color;
						});

						g.append("svg:text")
						.attr("x", 40)
						.attr("y", li.h / 2)
						.attr("dy", "0.35em")
						.attr("text-anchor", "middle")
						.text(function(d) {
							var test;
							return d.taxon; 
						});
					}

						function toggleLegend() {
							var legend = d3.select("#legend");
							if (legend.style("visibility") == "hidden") {
								legend.style("visibility", "");
							} else {
								legend.style("visibility", "hidden");
							}
						}

						// Generate a string that describes the points of a breadcrumb polygon.
						function breadcrumbPoints(d, i) {
							var points = [];
							points.push("0,0");
							points.push(conf.breadcrumb_dim.w + ",0");
							points.push(conf.breadcrumb_dim.w + conf.breadcrumb_dim.t + "," + (conf.breadcrumb_dim.h / 2));
							points.push(conf.breadcrumb_dim.w + "," + conf.breadcrumb_dim.h);
							points.push("0," + conf.breadcrumb_dim.h);
							if (i > 0) { // Leftmost breadcrumb; don't include 6th vertex.
							points.push(conf.breadcrumb_dim.t + "," + (conf.breadcrumb_dim.h / 2));
						}
						return points.join(" ");
					}

					// Update the breadcrumb trail to show the current sequence and percentage.
					function updateBreadcrumbs(nodeArray, percentageString) {

						// Data join; key function combines name and depth (= position in sequence).
						var g = d3.select("#trail")
						.selectAll("g")
						.data(nodeArray, function(d) { return d.short + d.depth; });

						// Add breadcrumb and label for entering nodes.
						var entering = g.enter().append("svg:g");

						entering.append("svg:polygon")
						.attr("points", breadcrumbPoints)
						.style("fill", function(d) { return d.fill; });

						entering.append("svg:text")
						.attr("x", (conf.breadcrumb_dim.w + conf.breadcrumb_dim.t) / 2)
						.attr("y", conf.breadcrumb_dim.h / 2)
						.attr("dy", "0.35em")
						.attr("text-anchor", "middle")
						.text(function(d) { return d.short; });

						// Set position for entering and updating nodes.
						g.attr("transform", function(d, i) {
							return "translate(" + i * (conf.breadcrumb_dim.w + conf.breadcrumb_dim.s) + ", 0)";
						});

						// Remove exiting nodes.
						g.exit().remove();

						// Now move and update the percentage at the end.
						d3.select("#trail").select("#endlabel")
						.attr("x", (nodeArray.length + 0.5) * (conf.breadcrumb_dim.w + conf.breadcrumb_dim.s))
						.attr("y", conf.breadcrumb_dim.h / 2)
						.attr("dy", "0.35em")
						.attr("text-anchor", "middle")
						.text(percentageString);

						// Make the breadcrumb trail visible, if it's hidden.
						d3.select("#trail")
						.style("visibility", "");

					}
					
					function LightenDarkenColor(col, amt) {
  
					    var usePound = false;
  
					    if (col[0] == "#") {
					        col = col.slice(1);
					        usePound = true;
					    }
 
					    var num = parseInt(col,16);
 
					    var r = (num >> 16) + amt;
 
					    if (r > 255) r = 255;
					    else if  (r < 0) r = 0;
 
					    var b = ((num >> 8) & 0x00FF) + amt;
 
					    if (b > 255) b = 255;
					    else if  (b < 0) b = 0;
 
					    var g = (num & 0x0000FF) + amt;
 
					    if (g > 255) g = 255;
					    else if (g < 0) g = 0;
 
					    return (usePound?"#":"") + (g | (b << 8) | (r << 16)).toString(16);
  
					}
					

					return sunburst2;
				};


hmmer_vis.tree_legend = function() {
  "use strict";
  var chart;
  var conf = {
  image_folder: "../../data/images/",
}
  var margin = {
    top: 20,
    right: 120,
    bottom: 20,
    left: 120
  },
  width = 960 - margin.right - margin.left,
  height = 800 - margin.top - margin.bottom;

  var model_organisms = {
    "Homo sapiens": conf.image_folder+"Homo-sapiens.svg",
    "Mus musculus": conf.image_folder+"Mus-musculus.svg",
    "Gallus gallus": conf.image_folder+"Gallus-gallus.svg",
    "Drosophila melanogaster": conf.image_folder+"Drosophila-melanogaster.svg",
    "Dictyostelium discoideum": conf.image_folder+"Dictyostelium-discoideum.svg",
    "Danio rerio": conf.image_folder+"Danio-rerio.svg",
    "Caenorhabditis elegans": conf.image_folder+"Caenorhabditis-elegans.svg",
    "Arabidopsis thaliana": conf.image_folder+"Arabidopsis-thaliana.svg",
    "Saccharomyces cerevisiae": conf.image_folder+"Saccharomyces-cerevisiae.svg",
    "Schizosaccharomyces pombe": conf.image_folder+"Schizosaccharomyces-pombe.svg",
    "Yersinia pestis": conf.image_folder+"Yersinia-pestis.svg",
  };




  var root = {"name": "all","display" : "All","hit_number": 600, "fill": "grey",
  "children" : [
    {"name": "viruses", "display" : "Viruses","hit_number": 300, "fill": "grey"},
    {"name": "archaea","display" : "Archaea","hit_number": 200, "fill": "grey"},
    {"name": "eukaryota","display" : "Eukaryotes","hit_number": 100, "fill": "grey",
    "children" : [
      {"name": "fungi","display" : "Fungi","hit_number": 50, "fill": "grey",
      "children":[
        {"name": "Saccharomyces cerevisiae","display" : "Yeast","hit_number": 30, "fill": "grey"}
      ]},
      {"name": "metazoa","display" : "Animals","hit_number": 30, "fill": "grey",
      "children" : [
        {"name": "Homo sapiens","display" : "Human","hit_number": 2, "fill": "grey"},
        {"name": "Mus musculus","display" : "Mouse","hit_number": 28, "fill": "grey"},
      ]
    },

  ]}
]
};

var i = 0,
duration = 750,
rectW = 70,
rectH = 12, zm;

var tree = d3.layout.tree().nodeSize([70, 40]);
var diagonal = d3.svg.diagonal()
.projection(function (d) {
  return [d.x + rectW / 2, d.y + rectH / 2];
});



// The cbak returned
var tree_legend = function(div) {
  chart = d3.select(div).append("svg").attr("width", 400).attr("height", 120)
  .call(zm = d3.behavior.zoom().scaleExtent([1,3]).on("zoom", tree.redraw)).append("g")
  .attr("transform", "translate(" + 80 + "," + 0 + ")");

  root.x0 = 0;
  root.y0 = height / 2;
  update(root);
  return chart;
};


hmmer_vis.dispatch.on('update_histogram', function(args){
  // 	    //do something here
  var arr = [];
  if (typeof args !== 'undefined' && typeof args.hits_distribution !== 'undefined'){
    console.log("found some in histogram "+args.hits_distribution);
    for (var i = 0; i < args.hits_distribution.length; i++){
      arr.push({'x' : i , 'y' : args.hits_distribution[i]});
    };
    var new_object = [{'key': "all", "values":arr}];
    histogram.redraw(new_object);
  }
})
//


function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
  links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function (d) {
    d.y = d.depth * 30;
  });

  // Update the nodes…
  var node = chart.selectAll("g.node")
  .data(nodes, function (d) {
    return d.id || (d.id = ++i);
  });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("g")
  .attr("class", "node")
  .attr("transform", function (d) {
    return "translate(" + source.x0 + "," + source.y0 + ")";
  })
  // .on("click", click);

  nodeEnter
  .filter(function(d) {return d.children; }).append("rect")
  .attr("width", rectW)
  .attr("height", rectH)
  .attr("rx", 3)
  .attr("ry", 3)
  .attr("stroke", "black")
  .attr("stroke-width", 1)
  .style("fill", function (d) {
    if(d.fill){
      return d.fill;
    }
    else{
      return d._children ? "lightsteelblue" : "#fff";
    }
  });

  nodeEnter.append("text")
  .attr("x", rectW / 2)
  .attr("y", rectH / 2)
  .attr("dy", ".35em")
  .attr("text-anchor", "middle")
  .text(function (d) {
    return d.display+" ("+d.hit_number+")";
  });
  nodeEnter.append("text")
  .attr("x", rectW / 2)
  .attr("y", rectH / 2)
  .attr("dy", ".35em")
  .attr("text-anchor", "middle")
  .text(function (d) {
    return d.display+" ("+d.hit_number+")";
  });


  nodeEnter
  .filter(function(d) {return !d.children; })
  .append("svg:image")
  .attr("xlink:href", function(d){
    var test = d.name;
    console.log(model_organisms[d.name]);
    return model_organisms[d.name];
  })
  .attr("transform", function(d) {
       return "translate(10,10)";
    })
   .attr("width", 20)
  .attr("height", 20)
  .style("opacity", function(d){
    if(!d.hit_number || d.hit_number < 1){
      return 0.1;
    }
    else{
      return 1;
    }
  });





  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
  .duration(duration)
  .attr("transform", function (d) {
    return "translate(" + d.x + "," + d.y + ")";
  });

  nodeUpdate.select("rect")
  .attr("width", rectW)
  .attr("height", rectH)
  .attr("stroke", "black")
  .attr("stroke-width", 1)
  .style("fill", function (d) {
    if(d.fill){
      return d.fill;
    }
    else{
      return d._children ? "lightsteelblue" : "#fff";
    }
  });

  nodeUpdate.select("text")
  .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
  .duration(duration)
  .attr("transform", function (d) {
    return "translate(" + source.x + "," + source.y + ")";
  })
  .remove();

  nodeExit.select("rect")
  .attr("width", rectW)
  .attr("height", rectH)
  //.attr("width", bbox.getBBox().width)""
  //.attr("height", bbox.getBBox().height)
  .attr("stroke", "black")
  .attr("stroke-width", 1);

  nodeExit.select("text");

  // Update the links…
  var link = chart.selectAll("path.link")
  .data(links, function (d) {
    return d.target.id;
  });

  // Enter any new links at the parent's previous position.
  link.enter().insert("path", "g")
  .attr("class", "link")
  .attr("x", rectW / 2)
  .attr("y", rectH / 2)
  .attr("d", function (d) {
    var o = {
      x: source.x0,
      y: source.y0
    };
    return diagonal({
      source: o,
      target: o
    });
  });

  // Transition links to their new position.
  link.transition()
  .duration(duration)
  .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
  .duration(duration)
  .attr("d", function (d) {
    var o = {
      x: source.x,
      y: source.y
    };
    return diagonal({
      source: o,
      target: o
    });
  })
  .remove();

  // Stash the old positions for transition.
  nodes.forEach(function (d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}
hmmer_vis.dispatch.on('update_tree_legend', function(args){
  //do something here
  console.log("I was told to  update the tree_legend with "+args.tree_legend_data);
  // pie_chart.redraw(args.count);
  // change the data
  //
  var tree_legend_data = args.tree_legend_data;


  update_data(root);
  function update_data(d) {
    if(tree_legend_data.hasOwnProperty(d.name)){
      d.hit_number = tree_legend_data[d.name]['hit_number'];
      d.fill = tree_legend_data[d.name]['fill'];
    }
    if(d.children){
      for (var child of d.children){
        update_data(child);
      }
    }
  }


  update(root);
})



return tree_legend;
};



hmmer_vis.word_cloud = function() {
	"use strict";
	var chart;
	var fill = d3.scale.category20();
	var data_words = 		[
		{word:"Tyrosine-protein",weight:20},{word:"Uncharacterized",weight:10},{word:"ABL1",weight:25},
		{word:"non-receptor",weight:15},{word:"kinase",weight:30},{word:"protein",weight:12},{word:"(Fragment)",weight:8},
		{word:"C-abl oncogene 1",weight:18},{word:"isoform B",weight:22},{word:"tyrosine",weight:27}];
    
	// The cbak returned
	var word_cloud = function(div) {
        chart = d3.layout.cloud().size([200, 200])
      .words(data_words.map(function(d) {
        return {text: d.word, size: d.weight};
      }))
      .padding(5)
      // .rotate(function() { return ~~(Math.random() * 2) * 90; })
      .font("Impact")
      .fontSize(function(d) { return d.size; })
      .on("end", draw)
      .start();




        return chart;
	};

    
    function draw(words) {
        d3.select("#word_cloud").append("svg")
          .attr("width", 300)
          .attr("height", 300)
        .append("g")
          .attr("transform", "translate(150,150)")
        .selectAll("text")
          .data(words)
        .enter().append("text")
          .style("font-size", function(d) { return d.size + "px"; })
          .style("font-family", "Impact")
          .style("fill", function(d, i) { return fill(i); })
          .attr("text-anchor", "middle")
          .attr("transform", function(d) {

            return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
          })
          .text(function(d) { return d.text; });
    }
	
	
    function drawUpdate(words){
     d3.layout.cloud().size([500, 500])
        .words(words)
        .padding(5)
        .rotate(function() { return ~~(Math.random() * 2) * 90; })
        .font("Impact")
        .fontSize(function(d) { return d.size; })
        .start();


        d3.select("#word_cloud svg")
        .selectAll("g")
          .attr("transform", "translate(150,150)")
        .selectAll("text")
          .data(words).enter().append("text")
          .style("font-size", function(d) { return d.size + "px"; })
          .style("font-family", "Impact")
          .style("fill", function(d, i) { return fill(i); })

          .attr("transform", function(d) {

            return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
          })
          .text(function(d) { return d.text; });



    }
	
	//setInterval(function () {
	    //     var long = data[0].values;
	    //     var next = new Date(long[long.length - 1].x);
	    //     next.setDate(next.getDate() + 1)
	    //     long.shift();
	    //     long.push({x:next.getTime(), y:Math.random() * 100});
	    //      redraw();
	    // }, 1500);

	return word_cloud;
};
